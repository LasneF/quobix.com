<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>code is art. on quobix</title><link>https://quobix.com/</link><description>Recent content in code is art. on quobix</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 22 Sep 2021 16:35:46 -0400</lastBuildDate><atom:link href="https://quobix.com/index.xml" rel="self" type="application/rss+xml"/><item><title>operation-success-response</title><link>https://quobix.com/vacuum/rules/operations/operation-success-response/</link><pubDate>Tue, 21 Jun 2022 09:23:21 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/operation-success-response/</guid><description>Check every Operation Response has either a 2xx or 3xx response code.
An operation isn&amp;rsquo;t much use, unless it returns an OK status code (2xx), or a Redirect/Choice status code (3xx)
Why did this violation appear? There is an Operation Response in your specification that isn&amp;rsquo;t returning a success response.
What is this rule checking for? Every Operation Response is checked for the following:
2xx or 3xx Response code A good example.</description></item><item><title>operation-operationId</title><link>https://quobix.com/vacuum/rules/operations/operation-operationid/</link><pubDate>Mon, 20 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/operation-operationid/</guid><description>Every operation must have an operationId. It&amp;rsquo;s critical that all Operation&amp;rsquo;s have an identifier.
An operationId is used by documentation tools, code generators and mocking engines. It&amp;rsquo;s used to define page names, URI&amp;rsquo;s and method names in auto-generated code.
Why did this violation appear? There is an Operation in your specification that has not defined an operationId.
What is this rule checking for? Every Operation is checked for the following</description></item><item><title>oas2-valid-schema-example</title><link>https://quobix.com/vacuum/rules/examples/oas2-valid-schema-example/</link><pubDate>Sun, 19 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/rules/examples/oas2-valid-schema-example/</guid><description>Examples are really important. When defining an OpenAPI specification, it&amp;rsquo;s critical that every operation request and response have examples defined for them. The same applies to definitions defined as references.
Examples help consumers of your API understand what real data should actually look like when sending requests, or listening for responses.
Good examples are particularly valuable when data is complex, deep, nested or contains special formatting.
Why did this violation appear?</description></item><item><title>oas3-valid-schema-example</title><link>https://quobix.com/vacuum/rules/examples/oas3-valid-schema-example/</link><pubDate>Sun, 19 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/rules/examples/oas3-valid-schema-example/</guid><description>Examples are really important. When defining an OpenAPI specification, it&amp;rsquo;s critical that every operation request and response have examples defined for them. The same applies to definitions defined as references.
Examples help consumers of your API understand what real data should actually look like when sending requests, or listening for responses.
Good examples are particularly valuable when data is complex, deep, nested or contains special formatting.
Why did this violation appear?</description></item><item><title>oasExample</title><link>https://quobix.com/vacuum/functions/openapi/oasexample/</link><pubDate>Sun, 19 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasexample/</guid><description>oasExample will scan an OpenAPI specification looking for violations around examples.
The function is used by the oas2-valid-schema-example and oas3-valid-schema-example Rules.
View Function Source</description></item><item><title>oasOpId</title><link>https://quobix.com/vacuum/functions/openapi/oasopid/</link><pubDate>Sun, 19 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasopid/</guid><description>oasOpId will scan an OpenAPI specification looking at each operation, and ensuring an operationId has been defined.
The function is used by the operation-operationId Rule
View Spectral Equivalent
View Function Source</description></item><item><title>oasOpSuccessResponse</title><link>https://quobix.com/vacuum/functions/openapi/oasopsuccessresponse/</link><pubDate>Sun, 19 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasopsuccessresponse/</guid><description>oasOpSuccessResponse will scan an OpenAPI specification looking at each operation, and ensuring at least one 2xx or 3xx HTTP responses has been defined.
The function is used by the operation-success-response Rule
View Function Source</description></item><item><title>What is vacuum?</title><link>https://quobix.com/vacuum/about/</link><pubDate>Sun, 12 Jun 2022 06:25:04 -0400</pubDate><guid>https://quobix.com/vacuum/about/</guid><description>vacuum is an ultra-super-fast, lightweight OpenAPI linter and quality checking tool, inspired by Spectral.
It&amp;rsquo;s also compatible with existing Spectral rulesets and generates compatible Spectral reports.
vacuum can suck all the lint of a 5mb OpenAPI spec in about 250ms. Designed to reliably lint OpenAPI specifications, very, very quickly. Including very large ones. Spectral. can be quite slow when used as an API and does not scale for enterprise applications.</description></item><item><title>Installing vacuum</title><link>https://quobix.com/vacuum/installing/</link><pubDate>Sun, 12 Jun 2022 06:25:04 -0400</pubDate><guid>https://quobix.com/vacuum/installing/</guid><description>1. Check out the code git clone https://github.com/daveshanley/vacuum.git Then change directory into vacuum cd vacuum
2. Build the code go build vacuum.go 3. Run the code ./vacuum lint &amp;lt;your-openapi-spec.yaml&amp;gt; Running vacuum via Docker vacuum is available as a container, you can pull the image from Docker Hub
docker pull dshanley/vacuum To run via docker, just add docker dshanley/vacuum as your command, like so
docker dshanley/vacuum lint &amp;lt;your-openapi-spec.yaml&amp;gt; Check out vacuum on GitHub</description></item><item><title>How to beat Impostor Syndrome</title><link>https://quobix.com/articles/impostor-syndrome/</link><pubDate>Tue, 08 Mar 2022 10:46:55 -0500</pubDate><guid>https://quobix.com/articles/impostor-syndrome/</guid><description>Ah, we meet again, my old friend. After recently joining Splunk, I got to experience a bit of an old nemesis of mine after being bombarded by firehoses of new data and information. It&amp;rsquo;s been a while since I felt it, but it&amp;rsquo;s no less awful than I remember.
Over the years, I&amp;rsquo;ve learned how to re-orient my thinking when that feeling appears. This article describes how I deal with it and some techniques that might be helpful to you.</description></item><item><title>Hello, Splunk!</title><link>https://quobix.com/articles/hello-splunk/</link><pubDate>Mon, 07 Feb 2022 14:19:38 -0500</pubDate><guid>https://quobix.com/articles/hello-splunk/</guid><description>A distinguished engineer Today I started a brand new role at Splunk. I&amp;rsquo;ve joined as Distinguished Engineer in the Security group as UI Architect of SaaS Applications.
In 1997 I founded hack-net.com (don&amp;rsquo;t visit the site). It was one of the most significant security-related websites on the internet for a while. We used to get millions of visitors a week and had 20+ contributors on the platform.
What happened to it?</description></item><item><title>How to build a React based pub-sub client using WebSockets and JavaScript</title><link>https://quobix.com/articles/react-pubsub-websockets/</link><pubDate>Mon, 24 Jan 2022 09:14:17 -0500</pubDate><guid>https://quobix.com/articles/react-pubsub-websockets/</guid><description>Watch the video This is quick tutorial to help you understand the basic mechanics of how Pub-Sub works and how you can call an asynchronous API from a browser using JavaScript, STOMP, and WebSockets. We&amp;rsquo;re going to build a simple
If you&amp;rsquo;re not familiar with STOMP, it stands for (S)imple (T)ext (O)riented (M)essaging (P)rotocol. It&amp;rsquo;s a straightforward but stable protocol that makes interacting with a message or event-based APIs a breeze.</description></item><item><title>Thank you, VMware.</title><link>https://quobix.com/articles/thanks-vmware/</link><pubDate>Mon, 17 Jan 2022 08:06:56 -0500</pubDate><guid>https://quobix.com/articles/thanks-vmware/</guid><description>This is my story about the most incredible time I had at VMware. I want to tell you about the most valuable experience I had; it&amp;rsquo;s the one thing that I can never thank VMware enough for.
A bumpy arrival In early 2012, I was the CTO of a failing start-up that I co-founded. Money had dried up; I had to let go of everything.
I had recently emigrated to the USA from the UK, and my (ex) wife was divorcing me because she had fallen in love with another man she had met while I was trying to build a business.</description></item><item><title>How to create a streaming AsyncAPI microservice using golang.</title><link>https://quobix.com/articles/asyncapi-streaming-using-golang/</link><pubDate>Tue, 21 Dec 2021 13:07:35 -0400</pubDate><guid>https://quobix.com/articles/asyncapi-streaming-using-golang/</guid><description>Watch the video If you want to learn more about AsyncAPI, head over to AsyncAPI.com and find out more about the standard and the power it provides us.
Moving forward, I will assume that you already know what AsyncAPI is and want to use it in your golang applications.
If you want to check out the source of this article it can be found on GitHub. 1. Getting started We&amp;rsquo;re going to create a microservice that exposes a single streaming API via AsyncAPI.</description></item><item><title>How to create an event-driven API via AsyncAPI using golang.</title><link>https://quobix.com/articles/asyncapi-pubsub-using-golang/</link><pubDate>Thu, 16 Dec 2021 13:07:35 -0400</pubDate><guid>https://quobix.com/articles/asyncapi-pubsub-using-golang/</guid><description>Watch the video If you want to learn more about AsyncAPI, head over to AsyncAPI.com and find out more about the standard and the power it provides us.
Moving forward, I will assume that you already know what AsyncAPI is and want to use it in your golang applications.
If you want to check out the source of this article it can be found on GitHub. 1. Getting started We&amp;rsquo;re going to create a microservice that exposes Publish and Subscribe endpoints defined by AsyncAPI.</description></item><item><title>M.A.R.V.I.N</title><link>https://quobix.com/articles/marvin/</link><pubDate>Tue, 09 Nov 2021 09:17:42 -0400</pubDate><guid>https://quobix.com/articles/marvin/</guid><description>It was February 2013, and I had just moved to San Francisco. I had been working for VMware for around eight months.
I was excited to be working (finally) in Silicon Valley; A dream of mine since childhood.
One wintery afternoon, Mornay Van Der Walt Called me into his office. He asked me
&amp;ldquo;Do you think we could build a prototype that installs and configures an entire SDDC in a hyper-converged infrastructure appliance format and do it in under 15 Minutes&amp;rdquo;?</description></item><item><title>TrashBox, Engineering a solution to memory loss.</title><link>https://quobix.com/articles/trashbox/</link><pubDate>Thu, 30 Sep 2021 15:23:07 -0400</pubDate><guid>https://quobix.com/articles/trashbox/</guid><description>&amp;ldquo;Dammit, why am I unable to get this under control!&amp;rdquo; I thought to myself as I ran, dragging two weeks worth of hot, stinking garbage toward the collection truck that was just about to drive past my house again.
It&amp;rsquo;s late August in Virginia in 2017, which isn&amp;rsquo;t great for storing garbage outside your house. My wife is newly pregnant and understandably losing her patience with me.
Hot and annoyed at myself, I reach for my pocket (and remember I&amp;rsquo;m still in my underpants), suddenly it dawns on me:</description></item><item><title>Legal Disclaimer</title><link>https://quobix.com/disclaimer/</link><pubDate>Mon, 27 Sep 2021 13:36:21 -0400</pubDate><guid>https://quobix.com/disclaimer/</guid><description>The views and opinions expressed on this site are mine and mine alone.
I do not represent my employer in anyway and I take full responsibility for any of the content found here.
Please don&amp;rsquo;t sue me ❤️.</description></item><item><title>I am sorry</title><link>https://quobix.com/sorry/</link><pubDate>Mon, 27 Sep 2021 11:14:19 -0400</pubDate><guid>https://quobix.com/sorry/</guid><description>Hi Friend,
I just wanted to say, that I am sorry if I have offended you.
There isn&amp;rsquo;t ever a situation in which I am trying to be hurtful, or exert rudeness (I hate both of those things).
If you have experienced emotional distress because of something I did, said or wrote, then please accept my genuine apology ♥️.
Sometimes, I misread intent. Sometimes I forget how brutal even the most innocent words can be, when used in a certain context.</description></item><item><title>What is Experience Engineering?</title><link>https://quobix.com/articles/experience-engineering/</link><pubDate>Sun, 26 Sep 2021 13:07:35 -0400</pubDate><guid>https://quobix.com/articles/experience-engineering/</guid><description>OK, so I know I just said that it&amp;rsquo;s an actual term. It&amp;rsquo;s a term that I&amp;rsquo;ve kind of made up. It is, however, composed of real things that all revolve around designing and building experiences.
More than just user interface It&amp;rsquo;s easy to default to &amp;ldquo;&amp;hellip;oh you mean UI, right?&amp;rdquo; when talking about engineering experiences.
The reality, however, is the term &amp;lsquo;UI&amp;rsquo; means more than a browser-based application. UI goes way beyond that.</description></item><item><title>Author</title><link>https://quobix.com/author/</link><pubDate>Wed, 22 Sep 2021 16:50:55 -0400</pubDate><guid>https://quobix.com/author/</guid><description>Hi, I&amp;rsquo;m Dave Shanley.
I&amp;rsquo;m a software architect, inventor, technical leader, and failed musician.
I have about twenty-five years of experience with designing and building software across various industries and businesses.
My specialty is Experience Engineering, which generally means that I design and build technology that you engage with as a consumer.
I work as a Distinguished Engineer at Splunk. My role is Architect of UI in the Security group.</description></item></channel></rss>