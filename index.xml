<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>code is art. on quobix</title><link>https://quobix.com/</link><description>Recent content in code is art. on quobix</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 22 Sep 2021 16:35:46 -0400</lastBuildDate><atom:link href="https://quobix.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Rise of the builder</title><link>https://quobix.com/articles/rise-of-the-builder/</link><pubDate>Fri, 24 Feb 2023 11:17:41 -0500</pubDate><guid>https://quobix.com/articles/rise-of-the-builder/</guid><description>As we knew it, the world stopped operating according to standard operating procedures in 2016.
And then, suddenly, it came to a complete halt in 2020.
What happened in 2016? We reached a boiling point in the west driven by the extreme left and right politics that dominated media outlets, mainly social media, and terrible cable news networks like Fox News and CNN.
The outcome led to events like Brexit and the January 6th Capitol Attack — a pivotal point in history for the modern world.</description></item><item><title>How to give a better demo</title><link>https://quobix.com/articles/demo-tips/</link><pubDate>Wed, 15 Feb 2023 05:19:38 -0500</pubDate><guid>https://quobix.com/articles/demo-tips/</guid><description>If you&amp;rsquo;re looking to level up your skills as a software engineer, one thing you need to pay attention to is the importance of giving a great demonstration of new features or code that you&amp;rsquo;ve created.
If you prefer a video format, you can watch the video version of this article on YouTube:
It boils down to one thing There&amp;rsquo;s a single overarching guiding principle that brings all the following advice together.</description></item><item><title>Parsing OpenAPI files using go</title><link>https://quobix.com/articles/parsing-openapi-using-go/</link><pubDate>Tue, 13 Dec 2022 15:54:43 -0500</pubDate><guid>https://quobix.com/articles/parsing-openapi-using-go/</guid><description>If you&amp;rsquo;re using go as your application programming language of choice and want to parse an OpenAPI specification, this guide will help make this a breeze.
Introducing libopenapi The library we&amp;rsquo;re going to use in this tutorial is libopenapi. It&amp;rsquo;s an enterprise-grade, high-performance library for OpenAPI, written in pure go. It supports OpenAPI 3.1 and 3.0 and Swagger (2.0)
I&amp;rsquo;m the author of libopenapi. It&amp;rsquo;s the same library that powers vacuum.</description></item><item><title>Introducing vacuum</title><link>https://quobix.com/articles/introducing-vacuum/</link><pubDate>Mon, 25 Jul 2022 06:46:55 -0500</pubDate><guid>https://quobix.com/articles/introducing-vacuum/</guid><description>I want to take you back to the fizzy and exciting times of 2016.
I had just exited the M.A.R.V.I.N project at VMware and was a little lost.
I had no mission and no goals. I was floating in the ether, looking for gaps, holes, anything that I could fill up with and hide for a while so that I could collect my thoughts.
A stranger with a smile One afternoon in February or March, a gentleman named Akmal Khan approached me.</description></item><item><title>paths-kebab-case</title><link>https://quobix.com/vacuum/rules/operations/paths-kebab-case/</link><pubDate>Tue, 19 Jul 2022 09:00:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/paths-kebab-case/</guid><description>Paths should not use underscores or uppercase letters. Neither should they be empty.
Servers may or may not be case-sensitive, so everything should be lowercase, there is no good reason for uppercase path segments.
Why did this violation appear? A segment in one of the paths defined in the specification, is not kebab-case
What is this rule checking for? Every path segment isn&amp;rsquo;t empty, and if not a variable - checks the value is kebab-case.</description></item><item><title>pathsKebabCase</title><link>https://quobix.com/vacuum/functions/openapi/pathskebabcase/</link><pubDate>Tue, 19 Jul 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/pathskebabcase/</guid><description>pathsKebabCase will check every path segment (that isn&amp;rsquo;t a parameter) and ensure the value has been defined as kebab-case and nothing else.
The function is used by the paths-kebab-case Rule
View Function Source</description></item><item><title>noVerbsInPath</title><link>https://quobix.com/vacuum/functions/openapi/noverbsinpath/</link><pubDate>Tue, 19 Jul 2022 06:29:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/noverbsinpath/</guid><description>noVerbsInPath will evaluate every path in the specification, and check that none of the path segments contain HTTP Verbs.
The function is used by the no-verbs-in-path Rule
View Function Source</description></item><item><title>no-http-verbs-in-path</title><link>https://quobix.com/vacuum/rules/operations/no-http-verbs-in-path/</link><pubDate>Tue, 19 Jul 2022 06:23:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/no-http-verbs-in-path/</guid><description>When HTTP verbs (get/post/put etc.) are used in path segments, it muddies the semantics of REST and creates a confusing and inconsistent experience.
It&amp;rsquo;s highly recommended that verbs are not used in path segments. Replace those HTTP verbs with more meaningful nouns.
Why did this violation appear? An HTTP verb appeared as part of a segment of a path.
What is this rule checking for? Every path segment does not contain a known HTTP verb.</description></item><item><title>no-ambiguous-paths</title><link>https://quobix.com/vacuum/rules/operations/no-ambiguous-paths/</link><pubDate>Sun, 17 Jul 2022 11:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/no-ambiguous-paths/</guid><description>Every path in an OpenAPI specification, should be unambiguous and clearly resolvable. What this essentially means is that each path should be able to be resolved independently when using variables in path segments.
For example &amp;lsquo;/burgers/{burgerId}&amp;rsquo; and &amp;lsquo;/{foodType}/burgers&amp;rsquo; are ambiguous, they can&amp;rsquo;t be resolved and either could trigger a different operation.
Why did this violation appear? Ambiguous paths were detected, paths that can&amp;rsquo;t be used together in the same specification.</description></item><item><title>operation-4xx-response</title><link>https://quobix.com/vacuum/rules/operations/operation-4xx-response/</link><pubDate>Sun, 17 Jul 2022 09:23:21 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/operation-4xx-response/</guid><description>Check every Operation Response defines at least one 4xx error code.
Consumers of your API are always going to send bad data. Unless operations return at least one User Error status code (4xx), the consumer of the API has no idea if they are using it correctly.
Why did this violation appear? There is an Operation Response in your specification that isn&amp;rsquo;t returning at least one 4xx error code.
What is this rule checking for?</description></item><item><title>ambiguousPaths</title><link>https://quobix.com/vacuum/functions/openapi/ambiguouspaths/</link><pubDate>Sun, 17 Jul 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/ambiguouspaths/</guid><description>ambiguousPaths will evaluate every path in the specification, against one another, to ensure that they are all resolvable and don&amp;rsquo;t conflict with one another.
The function is used by the no-ambiguous-paths Rule
View Function Source</description></item><item><title>oasOpErrorResponse</title><link>https://quobix.com/vacuum/functions/openapi/oasoperrorresponse/</link><pubDate>Sun, 17 Jul 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasoperrorresponse/</guid><description>oasOpErrorResponse will scan an OpenAPI specification looking at each operation, and ensuring at least one 4xx HTTP Error responses has been defined.
The function is used by the operation-4xx-response Rule
View Function Source</description></item><item><title>oasSchema</title><link>https://quobix.com/vacuum/functions/openapi/oasschema/</link><pubDate>Sat, 16 Jul 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasschema/</guid><description>oasSchema will check that a document is a valid OpenAPI Schema. It does this using a JSON Schema match against OpenAPI or Swagger schemas. If you only ever use a single function, this should be it.
The function is used by the oas2-schema and the oas3-schema Rules
View Function Source</description></item><item><title>oas2-schema</title><link>https://quobix.com/vacuum/rules/validation/oas2-schema/</link><pubDate>Sat, 16 Jul 2022 04:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/validation/oas2-schema/</guid><description>Specifications for OpenAPI/Swagger need to be valid, meaning that even without linting, the specification must meet the OpenAPI/Swagger Schema.
What is this rule checking for? Making sure the specification has a valid structure and aligns with the standard. It&amp;rsquo;s using JSON Schema to validate against the schema
Why did this violation appear? The Swagger specification is invalid.
Spectral Equivalent The rule is equivalent to oas3-schema</description></item><item><title>oas3-schema</title><link>https://quobix.com/vacuum/rules/validation/oas3-schema/</link><pubDate>Sat, 16 Jul 2022 04:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/validation/oas3-schema/</guid><description>Specifications for OpenAPI need to be valid, meaning that even without linting, the specification must meet the OpenAPI Schema.
What is this rule checking for? Making sure the specification has a valid structure and aligns with the standard. It&amp;rsquo;s using JSON Schema to validate against the schema
Why did this violation appear? The OpenAPI specification is invalid.
Spectral Equivalent The rule is equivalent to oas3-schema</description></item><item><title>Try vacuum online</title><link>https://quobix.com/vacuum/demo/</link><pubDate>Mon, 11 Jul 2022 06:25:04 -0400</pubDate><guid>https://quobix.com/vacuum/demo/</guid><description/></item><item><title>Loading a RuleSet</title><link>https://quobix.com/vacuum/api/loading-ruleset/</link><pubDate>Mon, 04 Jul 2022 08:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/api/loading-ruleset/</guid><description>It&amp;rsquo;s easy to generate a recommended RuleSet using the built-in Rules, but what if you want to load in a RuleSet from a file, or perhaps construct one using code - what are the options?
Create RuleSet from a file Use rulesets.CreateRuleSetFromData() to create a new RuleSet pointer.
// read in a RuleSet file ruleSetBytes, err := ioutil.ReadFile(&amp;#34;specific-ruleset.yaml&amp;#34;) if err != nil { panic(err.Error()) } // build and store built-in vacuum default RuleSets.</description></item><item><title>dashboard command</title><link>https://quobix.com/vacuum/commands/dashboard/</link><pubDate>Mon, 04 Jul 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/commands/dashboard/</guid><description>The console UI is an early state of development, it will change. Working in a terminal is an essential and every day part of any software or DevOps engineer&amp;rsquo;s life. A terminal is perhaps the most common interface most of us use.
Console UIs are not so common these days, which is really strange.
Using a browser based app is cool, but there is something really cool about a console UI.</description></item><item><title>html-report command</title><link>https://quobix.com/vacuum/commands/html-report/</link><pubDate>Mon, 04 Jul 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/commands/html-report/</guid><description>Ahh, the traditional generated HTML report. Quite often, they are a real let-down.
I wanted to do something not awful when it comes to the HTML report. vacuum can generate a self-contained interactive UI experience for exploring linting results from an OpenAPI specification, or a vacuum report.
The report has no dependencies, and it makes no network calls. The HTML file that is generated, is fully self-contained, it can be used without an internet connection.</description></item><item><title>spectral-report command</title><link>https://quobix.com/vacuum/commands/spectral-report/</link><pubDate>Mon, 04 Jul 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/commands/spectral-report/</guid><description>The spectral-report command will generate a linting report that is the same as the Spectral JSON output. It&amp;rsquo;s a drop-in replacement for any application using Spectral, but wants to go much faster.
vacuum spectral report This will generate a report from your my-openapi-spec.yaml and will save the file as spectral.json
If you leave the optional second argument off, then the default file output of vacuum-spectral-report.json will be used.
Available Flags spectral-report supports the following flags</description></item><item><title>report command</title><link>https://quobix.com/vacuum/commands/report/</link><pubDate>Mon, 04 Jul 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/commands/report/</guid><description>The report command will generate a high fidelity recording of a linting run. The report is a replayable data set that can be used to re-render any vacuum report using either the dashboard, or the html-report commands.
The original results are preserved and won&amp;rsquo;t be changed, regardless how many times the report is re-rendered.
vacuum report This will generate a report from your my-openapi-spec.yaml and will save the file as myreport-MM-DD-YY-HH-MM-SS.</description></item><item><title>RuleResultSet</title><link>https://quobix.com/vacuum/api/rule-resultset/</link><pubDate>Sun, 03 Jul 2022 08:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/api/rule-resultset/</guid><description>vacuum will return a slice of model.RuleFunctionResult structs as a linting result. The data list is unstructured and unsorted. If you&amp;rsquo;re game to try and sift through all that then good luck!
However, most of us want a simpler way to sort, group and search that data.
This is where RuleResultSet comes in.
Creating a new RuleResultSet Use model.NewRuleResultSet() to create a new RuleResultSet pointer.
// read in an OpenAPI Spec to a byte array specBytes, err := ioutil.</description></item><item><title>Custom Functions</title><link>https://quobix.com/vacuum/api/custom-functions/</link><pubDate>Sun, 03 Jul 2022 08:20:04 -0400</pubDate><guid>https://quobix.com/vacuum/api/custom-functions/</guid><description>Sometimes using the core functions are just not enough. Sometimes we need more power, we need the ability to hook in custom code and custom business logic.
Spectral does a great job with custom functions, So, vacuum has adopted a very similar design, to facilitate custom functions.
vacuum is written in go, so it can only run functions also written in go. Structure of a custom function A custom function is written the exact same way that all functions are written in vacuum.</description></item><item><title>API Quick Start</title><link>https://quobix.com/vacuum/api/getting-started/</link><pubDate>Sun, 03 Jul 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/api/getting-started/</guid><description>vacuum has been designed to work as an API from the ground up. This was actually one of the motivators behind the development of the tool.
If you&amp;rsquo;re a golang developer, and you want to lint OpenAPI specs using a library, then look no further.
Install vacuum install vacuum Lint an OpenAPI Spec This simple quick start code will read in an OpenAPI, generate a RuleSet from the built-in defaults, Then it will apply the rules to the spec, filter the results by a category, and then print them out to the console.</description></item><item><title>lint command</title><link>https://quobix.com/vacuum/commands/lint/</link><pubDate>Sun, 03 Jul 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/commands/lint/</guid><description>The fastest way to see something useful is to print something out to the console.
lint This will print a summary of your linting results. The lint command will use the Recommended RuleSet.
Just want to try things out? If you don&amp;rsquo;t have an OpenAPI spec and you want to see something, you can run it against one of the test specifications. A good one to try is the petstorev3.</description></item><item><title>The Index</title><link>https://quobix.com/vacuum/api/spec-index/</link><pubDate>Sun, 03 Jul 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/api/spec-index/</guid><description>The first iteration of vacuum had no index. Every rule would walk through the specification nodes, looking for what ever it is the function does. This worked great, except.. it didn&amp;rsquo;t.
vacuum would slow way down on complex rules like oas3-valid-schema-example.
It slowed down to the point where it was taking seconds to run on very large specs. This was no good.
After a re-think and many prototypes, I designed a simple index that will seek out everything in the specification and hold a reference.</description></item><item><title>All Rules</title><link>https://quobix.com/vacuum/rulesets/all/</link><pubDate>Sat, 02 Jul 2022 05:30:17 -0400</pubDate><guid>https://quobix.com/vacuum/rulesets/all/</guid><description>Want to throw the kitchen sink at your OpenAPI specification? Use All the rules!
To configure all the rules, you can simply use the same mechanism Spectral uses for extending a ruleset.
Create a new file (something like all-rules.yaml) and add the following YAML to it:
extends: [[spectral:oas, all]] This creates a ruleset that extends &amp;lsquo;all&amp;rsquo; rules. You can find this ruleset in the rulesets/examples directory, and it&amp;rsquo;s named all-ruleset.</description></item><item><title>Core Concepts</title><link>https://quobix.com/vacuum/concepts/</link><pubDate>Fri, 01 Jul 2022 12:20:04 -0400</pubDate><guid>https://quobix.com/vacuum/concepts/</guid><description>There are three core concepts when it comes to vacuum.
Function Rule RuleSet Functions power Rules and Rules make up RuleSets What are Rules? Rules are filters that define a set of target values you want to check against. Rules define what to look up, where to find it and what to check for. Those options are then sent to a function that will execute that logic.
Rules enforce a company or product API style guide.</description></item><item><title>Why should you care?</title><link>https://quobix.com/vacuum/why/</link><pubDate>Fri, 01 Jul 2022 12:20:04 -0400</pubDate><guid>https://quobix.com/vacuum/why/</guid><description>Why should I care about OpenAPI? Open API is the de-facto choice for designing and documenting REST APIs. Following an API First123 strategy allows teams to design and define, test, mock and explore APIs without building any code.
It allows service providers and consumers to work independently, using a strongly defined, rich API contract.
Why do I need an OpenAPI linter? We are human and we suck at writing. Even when something looks syntactically correct, it will probably still read like garbage.</description></item><item><title>xor</title><link>https://quobix.com/vacuum/functions/core/xor/</link><pubDate>Fri, 01 Jul 2022 09:43:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/core/xor/</guid><description>xor will check that a only one of two properties is set/defined within a given JSON Path.
How do I use this function? This function is configured by the following functionOptions. Essentially the properties is a two element string array of the two properties you want to check against.
NAME DESCRIPTION TYPE REQUIRED? properties array of two properties to check against []string yes Example ruleset configuration xor-the-things: message: &amp;#34;Only one thing can exist&amp;#34; given: $.</description></item><item><title>undefined</title><link>https://quobix.com/vacuum/functions/core/undefined/</link><pubDate>Fri, 01 Jul 2022 09:40:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/core/undefined/</guid><description>undefined will check that a given JSON Path does not exist/has not been defined.
Example ruleset configuration my-important-rule: message: &amp;#34;The thing should NOT BE defined&amp;#34; given: $.some.thing then: - field: chicken function: undefined - field: nugget function: undefined View Spectral Equivalent
View Function Source</description></item><item><title>length</title><link>https://quobix.com/vacuum/functions/core/length/</link><pubDate>Fri, 01 Jul 2022 09:31:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/core/length/</guid><description>length will check that a value meets a minimum or a maximum length (or both).
How do I use this function? This function is configured by the following functionOptions. Essentially min and max determine if those limits are checked.
NAME DESCRIPTION TYPE REQUIRED? min The minimum floor you want to check for integer no max The maximum ceiling you want to check for integer no You need to set at least one of these properties.</description></item><item><title>defined</title><link>https://quobix.com/vacuum/functions/core/defined/</link><pubDate>Fri, 01 Jul 2022 09:11:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/core/defined/</guid><description>defined will check that a given JSON Path exists and has been defined
The value can be anything, or it can be empty, as long as the key exists, this function will pass.
For a more complete function use truthy.
Example ruleset configuration my-important-rule: message: &amp;#34;The thing should be defined&amp;#34; given: $.some.thing then: - field: chicken function: defined - field: nugget function: defined View Spectral Equivalent
View Function Source</description></item><item><title>casing</title><link>https://quobix.com/vacuum/functions/core/casing/</link><pubDate>Fri, 01 Jul 2022 09:01:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/core/casing/</guid><description>casing will check that a value is using the correct case.
How do I use this function? This function is configured by the following functionOptions. Essentially the type is the case you want to check for.
NAME DESCRIPTION TYPE REQUIRED? type The case you want to check string yes disallowDigits Don&amp;rsquo;t allow any digits in pattern boolean false separator.char Use a separator character string false separator.allowLeading Allow a leading separator or not boolean false type can be one of the following:</description></item><item><title>enumeration</title><link>https://quobix.com/vacuum/functions/core/enumeration/</link><pubDate>Fri, 01 Jul 2022 09:01:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/core/enumeration/</guid><description>enumeration will check that the enum values in a property, match the configured ones as a part of the rule.
How do I use this function? This function is configured by the following functionOptions. Essentially the values is a comma separated list of all the things you want to check against.
NAME DESCRIPTION TYPE REQUIRED? values Comma separated values to check against string yes Example ruleset configuration check-values: description: &amp;#34;Check the required values exist&amp;#34; type: style recommended: true given: $.</description></item><item><title>oasDiscriminator</title><link>https://quobix.com/vacuum/functions/openapi/oasdiscriminator/</link><pubDate>Fri, 01 Jul 2022 06:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasdiscriminator/</guid><description>oasDiscriminator checks for the correct use of discriminator values when using polymorphism.
In OpenAPI 2, polymorphism is achieved using discriminator values, this function checks to ensure correct use.
Example ruleset configuration oas2-discriminator: description: &amp;#34;Check for discriminator use in schemas&amp;#34; type: &amp;#34;validation&amp;#34; recommended: true severity: &amp;#34;error&amp;#34; given: &amp;#34;$&amp;#34; then: function: &amp;#34;oas2Discriminator&amp;#34; The function is used by the oas2-discriminator Rule
View Function Source</description></item><item><title>oas2-discriminator</title><link>https://quobix.com/vacuum/rules/schemas/oas2-discriminator/</link><pubDate>Fri, 01 Jul 2022 06:13:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/schemas/oas2-discriminator/</guid><description>The discriminator as part of the Schema Object adds support for polymorphism. It is the property used to differentiate between other schema that inherit from it.
disciminator must be defined at this schema, and it must be in the required property list. When used, the value must be the name of this schema or any schema that inherits it.
Why did this violation appear? A discriminator was used incorrectly, or it could be missing a required mapping.</description></item><item><title>oas2OpSecurityDefined</title><link>https://quobix.com/vacuum/functions/openapi/oas2opsecuritydefined/</link><pubDate>Fri, 01 Jul 2022 05:49:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oas2opsecuritydefined/</guid><description>oas2OpSecurityDefined will check a specification to ensure each path operation has correctly defined security.
The function ensures any security schemes referenced in the operation, is present in the global specification security definition.
Example ruleset configuration oas3-operation-security-defined: description: &amp;#34;Check operation security is correctly defined&amp;#34; type: &amp;#34;validation&amp;#34; recommended: true severity: &amp;#34;error&amp;#34; given: &amp;#34;$&amp;#34; then: function: &amp;#34;oas2OpSecurityDefined&amp;#34; The function is used by the oas2-operation-security-defined Rule
View Function Source</description></item><item><title>oasOpSecurityDefined</title><link>https://quobix.com/vacuum/functions/openapi/oasopsecuritydefined/</link><pubDate>Fri, 01 Jul 2022 05:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasopsecuritydefined/</guid><description>oasOpSecurityDefined will check a specification to ensure each path operation has correctly defined security.
The function ensures any security schemes referenced in the operation, is present in the global specification security definition.
Example ruleset configuration oas3-operation-security-defined: description: &amp;#34;Check operation security is correctly defined&amp;#34; type: &amp;#34;validation&amp;#34; recommended: true severity: &amp;#34;error&amp;#34; given: &amp;#34;$&amp;#34; then: function: &amp;#34;oasOpSecurityDefined&amp;#34; The function is used by the oas3-operation-security-defined Rule
View Function Source</description></item><item><title>Custom RuleSets</title><link>https://quobix.com/vacuum/rulesets/custom-rulesets/</link><pubDate>Fri, 01 Jul 2022 05:30:17 -0400</pubDate><guid>https://quobix.com/vacuum/rulesets/custom-rulesets/</guid><description>Most of the time, just customizing the built-in OpenAPI Rules will get about 90% of the job done, most of the time.
At some point however, there comes a time to customize the rules and perhaps add some new ones using built-in core functions.
Don&amp;rsquo;t design APIs in a wiki. Most big companies are guaranteed to have wiki pages in Confluence (or similar), that have HTTP REST APIs that are inconsistently documented, invalid and out-of-date.</description></item><item><title>No Rules!</title><link>https://quobix.com/vacuum/rulesets/no-rules/</link><pubDate>Fri, 01 Jul 2022 05:30:17 -0400</pubDate><guid>https://quobix.com/vacuum/rulesets/no-rules/</guid><description>Why would anyone want no rules? what is the point of an empty RuleSet?
The main purpose of this RuleSet is to allow the individual enabling of rules
Create a new file (something like custom-rules.yaml) and add the following YAML to it:
extends: [[spectral:oas, off]] This creates a ruleset that extends &amp;lsquo;no&amp;rsquo; rules. You can find this ruleset in the rulesets/examples directory, and it&amp;rsquo;s named norules-ruleset.yaml
Now you can enable rules individually:</description></item><item><title>oas2-operation-security-defined</title><link>https://quobix.com/vacuum/rules/security/oas2-operation-security-defined/</link><pubDate>Fri, 01 Jul 2022 05:30:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/security/oas2-operation-security-defined/</guid><description>It&amp;rsquo;s important to add the correct [Authentication and Authorization] information in a specification. It&amp;rsquo;s easy to forget to add security to an operation, or use a scheme that isn&amp;rsquo;t globally defined.
This rule will check the security values of an operation, checking they reference a valid scheme.
Why did this violation appear? A security definition has been used that is not defined as a part of securityDefinitions
Bad example securityDefinitions: BasicAuth: type: basic ApiKeyAuth: type: apiKey in: header paths: /yummy-cakes: get: summary: &amp;#34;Get all the cakes for you and me&amp;#34; security: - IDoNotExist Good Example securityDefinitions: BasicAuth: type: basic ApiKeyAuth: type: apiKey in: header paths: /yummy-cakes: get: summary: &amp;#34;Get all the cakes for you and me&amp;#34; security: - BasicAuth - APIKeyAuth How do I fix this violation?</description></item><item><title>Recommended Rules</title><link>https://quobix.com/vacuum/rulesets/recommended/</link><pubDate>Fri, 01 Jul 2022 05:30:17 -0400</pubDate><guid>https://quobix.com/vacuum/rulesets/recommended/</guid><description>Want to check against recommended rules?
Recommended rules are the default behavior from vacuum. If there is no ruleset supplied, vacuum will always run recommended rules only.
To explicitly define a &amp;lsquo;recommended only&amp;rsquo; ruleset that can be customized, it&amp;rsquo;s easy to extend a ruleset the same way that Spectral does.
Create a new file (something like recommended-rules.yaml) and add the following YAML to it:
extends: [[spectral:oas, recommended]] This creates a ruleset that extends &amp;lsquo;recommended&amp;rsquo; rules.</description></item><item><title>oas3-operation-security-defined</title><link>https://quobix.com/vacuum/rules/security/oas3-operation-security-defined/</link><pubDate>Fri, 01 Jul 2022 05:20:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/security/oas3-operation-security-defined/</guid><description>It&amp;rsquo;s important to add the correct [Authentication and Authorization] information in a specification. It&amp;rsquo;s easy to forget to add security to an operation, or use a scheme that isn&amp;rsquo;t globally defined.
This rule will check the security values of an operation, checking they reference a valid scheme.
Why did this violation appear? A security definition has been used that is not defined as a part of $components.securitySchemes
Bad example components: securitySchemes: BearerAuth: type: http scheme: bearer BasicAuth: type: http scheme: basic paths: /yummy-cakes: get: summary: &amp;#34;Get all the cakes for you and me&amp;#34; security: - IDoNotExist Good Example components: securitySchemes: BearerAuth: type: http scheme: bearer BasicAuth: type: http scheme: basic paths: /yummy-cakes: get: summary: &amp;#34;Get all the cakes for you and me&amp;#34; security: - BasicAuth - BearerAuth How do I fix this violation?</description></item><item><title>duplicated-entry-in-enum</title><link>https://quobix.com/vacuum/rules/schemas/duplicated-entry-in-enum/</link><pubDate>Thu, 30 Jun 2022 08:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/schemas/duplicated-entry-in-enum/</guid><description>Enums allow API designers to define a pre-set list of values that are acceptable for input, or will be output.
Sometimes, copy-pasta happens and Enums become duplicated.
This rule checks every item is unique, in all enum values.
Why did this violation appear? A value listed in an enum has been duplicated. Each value needs to be unique.
Bad example paths: /items: get: parameters: - in: query name: sort description: &amp;#34;Sorting order for items&amp;#34; schema: type: string enum: [asc, desc, asc, asc] .</description></item><item><title>no-$ref-siblings</title><link>https://quobix.com/vacuum/rules/schemas/no-ref-siblings/</link><pubDate>Thu, 30 Jun 2022 08:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/schemas/no-ref-siblings/</guid><description>JSON Schema References allow authors to re-use schemas for objects in multiple places. In the standard, $ref nodes are allowed sibling nodes (most commonly description) nodes that allow authors to describe the use of the reference in the context of the current definition.
OpenAPI is a superset of JSON Schema. However, in the OpenAPI standard, $ref values CANNOT place any sibling nodes (like a description) next to that $ref.
Essentially, OpenAPI will discard anything next to that $ref, it&amp;rsquo;s going to ignore it.</description></item><item><title>oas3-schema</title><link>https://quobix.com/vacuum/rules/schemas/oas3-schema/</link><pubDate>Thu, 30 Jun 2022 08:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/schemas/oas3-schema/</guid><description>Perhaps the &amp;rsquo;lightest&amp;rsquo; linting there is. This rule ensures that the document provided, matches the schema of an OpenAPI 3 (OpenAPI 3.0) document.
The rule performs a schema match using JSON Schema
Click to see schema used to match against.
Why did this violation appear? The spec provided is not a valid OpenAPI 3 specification.
How do I fix this violation? Correct the specification violations, there isn&amp;rsquo;t any other way forward otherwise.</description></item><item><title>oas3-unused-component</title><link>https://quobix.com/vacuum/rules/schemas/oas3-unused-component/</link><pubDate>Thu, 30 Jun 2022 08:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/schemas/oas3-unused-component/</guid><description>Components in OpenAPI 3 are reusable/sharable elements. Any other object can reference it, to save duplication.
Sometimes components are never referenced from anywhere, they are &amp;lsquo;unused&amp;rsquo; or &amp;lsquo;orphaned&amp;rsquo;.
This could be an oversight, it could be a case where the spec was changed and new schemas have replaced older ones, and those older components were never removed.
It&amp;rsquo;s good contract hygiene to prune anything that isn&amp;rsquo;t used, out of it.</description></item><item><title>oas2-api-host</title><link>https://quobix.com/vacuum/rules/information/oas2-api-host/</link><pubDate>Thu, 30 Jun 2022 07:56:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/information/oas2-api-host/</guid><description>In OpenAPI 2 host needs to be present and not empty.
Tools use this value when generating code, mocks, tests or documentation. It&amp;rsquo;s important that it&amp;rsquo;s not left out.
Why did this violation appear? The host value is missing, or it&amp;rsquo;s been left empty.
Bad example swagger: 2.0 host: &amp;#34;&amp;#34; paths: /vacuum: ... Good example swagger: 2.0 host: &amp;#34;quobix.com&amp;#34; schemes: - &amp;#34;https&amp;#34; paths: /vacuum: ... How do I fix this violation?</description></item><item><title>duplicatedEnum</title><link>https://quobix.com/vacuum/functions/openapi/duplicatedenum/</link><pubDate>Thu, 30 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/duplicatedenum/</guid><description>duplicatedEnum will check a specification to ensure that Enum values have not been duplicated.
Sometimes copy-pasta happens. duplicatedEnum has your back and won&amp;rsquo;t let it get past you.
Example ruleset configuration duplicated-entry-in-enum: description: &amp;#34;Check enum values have not been duplicated&amp;#34; type: &amp;#34;validation&amp;#34; recommended: true severity: &amp;#34;error&amp;#34; given: &amp;#34;$&amp;#34; then: function: &amp;#34;duplicatedEnum&amp;#34; The function is used by the duplicated-entry-in-enum Rule
View Function Source</description></item><item><title>oasUnusedComponent</title><link>https://quobix.com/vacuum/functions/openapi/oasunusedcomponent/</link><pubDate>Thu, 30 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasunusedcomponent/</guid><description>oasUnusedComponent will check all Components (OpenAPI 3) or
Definitions (OpenAPI 2/Swagger) have been used somewhere within the document.
Example ruleset configuration oas2-unused-definition: description: &amp;#34;Check for orphaned or unused definitions&amp;#34; type: &amp;#34;validation&amp;#34; recommended: true severity: &amp;#34;warn&amp;#34; given: &amp;#34;$&amp;#34; then: function: &amp;#34;oasUnusedComponent&amp;#34; The function is used by the oas2-unused-definition and the oas3-unused-component Rules
View Function Source</description></item><item><title>refSiblings</title><link>https://quobix.com/vacuum/functions/openapi/refsiblings/</link><pubDate>Thu, 30 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/refsiblings/</guid><description>refSiblings checks every $ref in the specification to ensure that it&amp;rsquo;s a lone child node, and does not contain and siblings.
OpenAPI ignores everything but the ref. This is a problem because JSON Schema allows sibling nodes.
Example ruleset configuration no-$ref-sibling: description: &amp;#34;Ensure there are no sibling nodes next to $ref properties&amp;#34; type: &amp;#34;validation&amp;#34; recommended: true severity: &amp;#34;error&amp;#34; given: &amp;#34;$&amp;#34; then: function: &amp;#34;refSiblings&amp;#34; The function is used by the no-$ref-siblings Rule</description></item><item><title>oasDocumentSchema</title><link>https://quobix.com/vacuum/functions/openapi/oasdocumentschema/</link><pubDate>Thu, 30 Jun 2022 04:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasdocumentschema/</guid><description>oasDocumentSchema checks that a specification matches the OpenAPI v2 or the OpenAPI 3 schema definitions.
The rule uses this OpenAPI v2 schema and this OpenAPI v3 schema.
Example ruleset configuration oas2-schema: description: &amp;#34;Check schema is correct&amp;#34; type: &amp;#34;validation&amp;#34; recommended: true severity: &amp;#34;error&amp;#34; given: &amp;#34;$&amp;#34; then: function: &amp;#34;oasDocumentSchema&amp;#34; View Function Source</description></item><item><title>oas2-oneOf</title><link>https://quobix.com/vacuum/rules/schemas/oas2-oneof/</link><pubDate>Wed, 29 Jun 2022 08:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/schemas/oas2-oneof/</guid><description>Polymorphism is a concept that exists in JSON Schema. OpenAPI is a superset of JSON Schema which means it can inherit (or abandon) what ever it likes.
oneOf is a keyword that was not introduced into OpenAPI until version 3.0.
It&amp;rsquo;s a common mistake when working on specifications, reading newer docs and mixing and matching capabilities. This rule checks for those mistakes.
A note on Polymorphism We would recommend against using &amp;lsquo;oneOf&amp;rsquo; in general.</description></item><item><title>oas2-schema</title><link>https://quobix.com/vacuum/rules/schemas/oas2-schema/</link><pubDate>Wed, 29 Jun 2022 08:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/schemas/oas2-schema/</guid><description>Perhaps the &amp;rsquo;lightest&amp;rsquo; linting there is. This rule ensures that the document provided, matches the schema of a Swagger (OpenAPI 2.0) document.
The rule performs a schema match using JSON Schema
Click to see schema used to match against.
Why did this violation appear? The spec provided is not a valid OpenAPI 2 specification.
How do I fix this violation? Correct the specification violations, there isn&amp;rsquo;t any other way forward otherwise.</description></item><item><title>oas2-anyOf</title><link>https://quobix.com/vacuum/rules/schemas/oas2-anyof/</link><pubDate>Wed, 29 Jun 2022 07:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/schemas/oas2-anyof/</guid><description>Polymorphism is a concept that exists in JSON Schema. OpenAPI is a superset of JSON Schema which means it can inherit (or abandon) what ever it likes.
anyOf is a keyword that was not introduced into OpenAPI until version 3.0.
It&amp;rsquo;s a common mistake when working on specifications, reading newer docs and mixing and matching capabilities. This rule checks for those mistakes.
A note on Polymorphism We would recommend against using &amp;lsquo;anyOf&amp;rsquo; in general.</description></item><item><title>oas2PolymorphicOneOf</title><link>https://quobix.com/vacuum/functions/openapi/oas2polymorphiconeof/</link><pubDate>Wed, 29 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oas2polymorphiconeof/</guid><description>oas2PolymorphicOneOf will check a specification to ensure that if it&amp;rsquo;s a Swagger specification (OpenAPI 2.0), then it has not made use of oneOf.
Example ruleset configuration oas2-oneOf: description: &amp;#34;Check for invalid use of &amp;#39;oneOf&amp;#39;&amp;#34; type: &amp;#34;validation&amp;#34; recommended: true severity: &amp;#34;err&amp;#34; given: &amp;#34;$&amp;#34; then: function: &amp;#34;oas2PolymorphicOneOf&amp;#34; The function is used by the oas2-oneOf Rule
View Function Source</description></item><item><title>tag-description</title><link>https://quobix.com/vacuum/rules/tags/tag-description/</link><pubDate>Wed, 29 Jun 2022 06:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/tags/tag-description/</guid><description>Global Tags define meta-data that can then be used by Operations and Paths Rules
Tags are used as navigation/taxonomy meta-data for documentation and code generation tooling. Descriptions are really important for consumers.
Why did this violation appear? One or more global tags does not contain a description
Bad example openapi: 3.0.1 tags: - name: &amp;#34;Tag1&amp;#34; - name: &amp;#34;Tag2&amp;#34; info: ... Good Example openapi: 3.0.1 tags: - name: &amp;#34;Tag1&amp;#34; description: &amp;#34;Tag1 is a tag for group 1, and related things&amp;#34; - name: &amp;#34;Tag2&amp;#34; description: &amp;#34;Tag2 is a tag for group 2, which is only for one thing.</description></item><item><title>typed-enum</title><link>https://quobix.com/vacuum/rules/schemas/typed-enum/</link><pubDate>Wed, 29 Jun 2022 06:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/schemas/typed-enum/</guid><description>Enum definitions should match specified types
Why did this violation appear? One or more enum values do not match the specified type.
Bad example enum is supposed to be an array of string, but gets a mixed array.
/pizza: parameters: - in: query name: &amp;#34;party&amp;#34; schema: type: &amp;#34;string&amp;#34; enum: [&amp;#34;big&amp;#34;, 1, 0.33, false, &amp;#34;small&amp;#34;] ... Good Example /pizza: parameters: - in: query name: &amp;#34;party&amp;#34; schema: type: &amp;#34;string&amp;#34; enum: [&amp;#34;big&amp;#34;, &amp;#34;small&amp;#34;] .</description></item><item><title>oas2-operation-formData-consume-check</title><link>https://quobix.com/vacuum/rules/operations/oas2-operation-formdata-consume-check/</link><pubDate>Wed, 29 Jun 2022 05:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/oas2-operation-formdata-consume-check/</guid><description>Operations with the in: formData parameter,
must include &amp;lsquo;application/x-www-form-urlencoded&amp;rsquo; or &amp;lsquo;multipart/form-data&amp;rsquo; in their consumes property.
Why did this violation appear? When using in: formData, the consumes property needs to be set to a valid type.
Bad example swagger: 2.0 paths: /survey: parameters: - in: formData name: &amp;#34;name&amp;#34; type: string description: &amp;#34;A person&amp;#39;s name.&amp;#34; - in: formData name: &amp;#34;fav_number&amp;#34; type: number description: &amp;#34;A person&amp;#39;s favorite number&amp;#34; post: consumes: - &amp;#34;chicken-soup/and-cake&amp;#34; ... Good example swagger: 2.</description></item><item><title>path-declarations-must-exist</title><link>https://quobix.com/vacuum/rules/operations/path-declarations-must-exist/</link><pubDate>Wed, 29 Jun 2022 05:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/path-declarations-must-exist/</guid><description>JSON Path: $.paths When defining Paths and using Path Parameters It&amp;rsquo;s important to not add blank declarations.
This rule checks that no paths is using empty path parameters.
Why did this violation appear? One or more paths definitions has an empty parameter defined.
Bad example paths: /pizza/{}/{icecream}: get: parameters: - in: path name: &amp;#34;icecream&amp;#34; ... Good example paths: /pizza/{cake}/{icecream}: get: parameters: - in: path name: &amp;#34;cake&amp;#34; - in: path name: &amp;#34;icecream&amp;#34; .</description></item><item><title>path-keys-no-trailing-slash</title><link>https://quobix.com/vacuum/rules/operations/path-keys-no-trailing-slash/</link><pubDate>Wed, 29 Jun 2022 05:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/path-keys-no-trailing-slash/</guid><description>JSON Path: $.paths When defining Paths, it&amp;rsquo;s important to not include a trailing slash at the end of the path definition.
It&amp;rsquo;s good hygiene to keep trailing slashes off paths, mainly because it can confuse tooling that use the specification for generating code, mocking or other applications. Some tools will get confused, some tools won&amp;rsquo;t care.
Example of trailing slashes borking things up If we have two paths:
somedomain.com/some/path/ somedomain.com/some/path Some tools will treat this as two separate paths, some tools will see them as the same.</description></item><item><title>path-not-include-query</title><link>https://quobix.com/vacuum/rules/operations/path-not-include-query/</link><pubDate>Wed, 29 Jun 2022 05:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/path-not-include-query/</guid><description>JSON Path: $.paths This rule checks to ensure a paths definition does not contain a Query string.
The mistake is actually quite common with authors new to the OpenAPI standard. It happens all the time.
Why did this violation appear? One or more paths definitions contains a query string.
Bad example paths: /deserts/icecream?sprinkles=true: get: parameters: ... Good example paths: /deserts/icecream: get: parameters: - in: query name: &amp;#34;sprinkles&amp;#34; ... How do I fix this violation?</description></item><item><title>operation-tags</title><link>https://quobix.com/vacuum/rules/tags/operation-tags/</link><pubDate>Wed, 29 Jun 2022 04:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/tags/operation-tags/</guid><description>Operations make use of Tags to group operations together. Tags are really important for documentation and exploring tools.
This rule checks that an operation has defined tags, and that at least one exists. This rule is a more generic and more useful version of the operation-singular-tag.
Why did this violation appear? One or more operation in the specification does not have a tags property that contains at least a single tag.</description></item><item><title>oas2PolymorphicAnyOf</title><link>https://quobix.com/vacuum/functions/openapi/oas2polymorphicanyof/</link><pubDate>Wed, 29 Jun 2022 04:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oas2polymorphicanyof/</guid><description>oas2PolymorphicAnyOf will check a specification to ensure that if it&amp;rsquo;s a Swagger specification (OpenAPI 2.0), then it has not made use of anyOf.
Example ruleset configuration oas2-anyOf: description: &amp;#34;Check for invalid use of &amp;#39;anyOf&amp;#39;&amp;#34; type: &amp;#34;validation&amp;#34; recommended: true severity: &amp;#34;err&amp;#34; given: &amp;#34;$&amp;#34; then: function: &amp;#34;oas2PolymorphicAnyOf&amp;#34; The function is used by the oas2-anyOf Rule
View Function Source</description></item><item><title>oasOperationTags</title><link>https://quobix.com/vacuum/functions/openapi/oasoperationtags/</link><pubDate>Wed, 29 Jun 2022 04:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasoperationtags/</guid><description>oasOperationTags will check each Operation for a non-empty tags definition. If there is no definition for an operation method, or the array is empty then a violation is triggered.
Example ruleset configuration operation-tags: description: &amp;#34;Check operation has used tags properly&amp;#34; type: &amp;#34;validation&amp;#34; recommended: true severity: &amp;#34;warn&amp;#34; given: &amp;#34;$&amp;#34; then: function: &amp;#34;oasOperationTags&amp;#34; The function is used by the operation-tags Rule
View Function Source</description></item><item><title>oasOpFormDataConsumeCheck</title><link>https://quobix.com/vacuum/functions/openapi/oasopformdataconsumecheck/</link><pubDate>Wed, 29 Jun 2022 04:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasopformdataconsumecheck/</guid><description>oasOpFormDataConsumeCheck will check each parameter and its consumer has the correct type. The function checks for &amp;lsquo;application/x-www-form-urlencoded&amp;rsquo; or &amp;lsquo;multipart/form-data&amp;rsquo; being set for any parameter being consumed by an operation.
Example ruleset configuration oas2-operation-formData-consume-check: description: &amp;#34;Check formData for correct &amp;#39;consumes&amp;#39; type&amp;#34; type: &amp;#34;validation&amp;#34; recommended: true severity: &amp;#34;warn&amp;#34; given: &amp;#34;$&amp;#34; then: function: &amp;#34;oasOpFormDataConsumeCheck&amp;#34; The function is used by the oas2-operation-formData-consume-check Rule
View Function Source</description></item><item><title>typedEnum</title><link>https://quobix.com/vacuum/functions/openapi/typedenum/</link><pubDate>Wed, 29 Jun 2022 04:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/typedenum/</guid><description>typedEnum will check each Enum definition, and will ensure that the type defined for the enum, actually matches the values supplied.
Example ruleset configuration typed-enum: description: &amp;#34;Enum values must respect the specified type&amp;#34; type: &amp;#34;validation&amp;#34; recommended: true severity: &amp;#34;warn&amp;#34; given: &amp;#34;$&amp;#34; then: function: &amp;#34;typedEnum&amp;#34; The function is used by the typed-enum Rule
View Function Source</description></item><item><title>oasAPIServers</title><link>https://quobix.com/vacuum/functions/openapi/oasapiservers/</link><pubDate>Tue, 28 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasapiservers/</guid><description>oasAPIServers ensures that all OpenAPI 3+ server definitions are correct and the URLs are valid.
The function is used by the oas3-api-servers Rule
View Function Source</description></item><item><title>component-description</title><link>https://quobix.com/vacuum/rules/descriptions/component-description/</link><pubDate>Tue, 28 Jun 2022 05:59:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/descriptions/component-description/</guid><description>OpenAPI 3+ Components have description properties. This rule checks that for every component there is a description set.
Why did this violation appear? One or more description elements in the spec are missing from a component (v3+)
Bad example components: schemas: ChickenNugget: type: object properties: id: type: integer name: type: string Good example components: schemas: ChickenNugget: type: object description: &amp;#34;This represents a chicken nugget, used for all kinds of nugget fun.</description></item><item><title>description-duplication</title><link>https://quobix.com/vacuum/rules/descriptions/description-duplication/</link><pubDate>Tue, 28 Jun 2022 05:59:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/descriptions/description-duplication/</guid><description>Descriptions are really important. Often, contract authors copy and paste a lot. This it because it&amp;rsquo;s easier to copy and paste things and modify them, rather than typing out a bunch of YAML or JSON.
The problem with copy and pasting for contracts should be clear. Duplication of content is everywhere, including descriptions. This is really un-helpful for anyone trying to understand a contract, not to mention creating a really poor experience for documentation users.</description></item><item><title>operation-operationId-valid-in-url</title><link>https://quobix.com/vacuum/rules/operations/operation-operationid-valid-in-url/</link><pubDate>Tue, 28 Jun 2022 05:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/operation-operationid-valid-in-url/</guid><description>This rule is going to be re-written. Its behavior will not change, however the current implementation is not satisfactory. An Operation should always contain an operationId. This rule will check the value used is friendly to being used as part of a URL.
Documentation and code generation tools depend on this value being unique and often use it as part of URL paths.
Why did this violation appear? The operationId for one or more Operation definitions is not URL friendly.</description></item><item><title>oas3-api-servers</title><link>https://quobix.com/vacuum/rules/validation/oas3-api-servers/</link><pubDate>Tue, 28 Jun 2022 04:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/validation/oas3-api-servers/</guid><description>When configuring Servers in OpenAPI, its important to ensure correctness, so tooling can inspect endpoints automatically.
Mis-configured server configurations will damage automation capabilities for the contract.
What is this rule checking for? Server definitions exist Contains URL URL is valid URL does not contain a trailing slash Why did this violation appear? The servers object is missing from the spec, or one of more entries contain an invalid URL.
Bad example servers: - url: &amp;#34;I am not a URL&amp;#34; - url: &amp;#34;httpWRONG//i-am-not-valid&amp;#34; - url: &amp;#34;https://i-end-with-a-slash.</description></item><item><title>oasComponentDescriptions</title><link>https://quobix.com/vacuum/functions/openapi/oascomponentdescriptions/</link><pubDate>Mon, 27 Jun 2022 08:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oascomponentdescriptions/</guid><description>oasComponentDescriptions will check each description found in Components
Example ruleset configuration description-duplication: description: &amp;#34;Check component description&amp;#34; type: &amp;#34;validation&amp;#34; recommended: true severity: &amp;#34;info&amp;#34; given: &amp;#34;$&amp;#34; then: function: &amp;#34;oasComponentDescriptions&amp;#34; The function is used by the component-description Rule
View Function Source</description></item><item><title>oasDuplicationDescription</title><link>https://quobix.com/vacuum/functions/openapi/oasdescriptionduplication/</link><pubDate>Mon, 27 Jun 2022 08:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasdescriptionduplication/</guid><description>oasDescriptionDuplication will check each description found in the specification and creates a hash of it.
Hashes are then checked for equality, if the hashes match, the content is identical and a violation is triggered.
Example ruleset configuration description-duplication: description: &amp;#34;Check descriptions for duplicates&amp;#34; type: &amp;#34;validation&amp;#34; recommended: true severity: &amp;#34;info&amp;#34; given: &amp;#34;$&amp;#34; then: function: &amp;#34;oasDescriptionDuplication&amp;#34; The function is used by the description-duplication Rule
View Function Source</description></item><item><title>oasParamDescriptions</title><link>https://quobix.com/vacuum/functions/openapi/oasparamdescriptions/</link><pubDate>Mon, 27 Jun 2022 08:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasparamdescriptions/</guid><description>oasParamDescriptions Checks parameter descriptions have been set.
This function checks both OpenAPI 2 and 3+ specs.
Example ruleset configuration oas3-parameter-descriptions: description: &amp;#34;Parameters should always include descriptions&amp;#34; type: &amp;#34;validation&amp;#34; recommended: true severity: &amp;#34;warn&amp;#34; given: &amp;#34;$&amp;#34; then: function: &amp;#34;oasParamDescriptions&amp;#34; The function is used by the oas2-parameter-description and the oas3-parameter-description Rules
View Function Source</description></item><item><title>oas3-parameter-description</title><link>https://quobix.com/vacuum/rules/descriptions/oas3-parameter-description/</link><pubDate>Mon, 27 Jun 2022 07:59:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/descriptions/oas3-parameter-description/</guid><description>This rule checks that Parameters contain a description.
Descriptions for parameters are really important. Documentation generation tools use this description as the main bulk of the documentation for describing what a parameter does and its effect.
It&amp;rsquo;s amazing how often API authors leave this blank or don&amp;rsquo;t put anything meaningful in here.
Why did this violation appear? One Parameter or more are missing a description.
Bad example paths: /chicken/nuggets/{nuggetId}: get: summary: &amp;#34;Get a chicken nugget by ID&amp;#34; parameters: - in: path name: nuggetId schema: type: integer required: true .</description></item><item><title>oas2-parameter-description</title><link>https://quobix.com/vacuum/rules/descriptions/oas2-parameter-description/</link><pubDate>Mon, 27 Jun 2022 07:58:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/descriptions/oas2-parameter-description/</guid><description>This rule checks that Parameters contain a description.
Descriptions for parameters are really important. Documentation generation tools use this description as the main bulk of the documentation for describing what a parameter does and its effect.
It&amp;rsquo;s amazing how often API authors leave this blank or don&amp;rsquo;t put anything meaningful in here.
Why did this violation appear? One Parameter or more are missing a description.
Bad example paths: /chicken/nuggets/{nuggetId}: get: summary: &amp;#34;Gets a chicken nugget by ID.</description></item><item><title>operation-description</title><link>https://quobix.com/vacuum/rules/descriptions/operation-description/</link><pubDate>Sun, 26 Jun 2022 15:58:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/descriptions/operation-description/</guid><description>Checks that an Operation Object contains a description OR a summaryand that it meets a minimum number of words.
Descriptions and summaries for operations are really important. Documentation generation tools use this description as the main bulk of the documentation for the operation.
It&amp;rsquo;s amazing how often API authors leave this blank or don&amp;rsquo;t put anything meaningful in here.
The reason why both description and summary are checked? People tend to use them differently, sometimes omitting one, or the other, depending on how the specification is used.</description></item><item><title>oasDescriptions</title><link>https://quobix.com/vacuum/functions/openapi/oasdescriptions/</link><pubDate>Sun, 26 Jun 2022 15:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasdescriptions/</guid><description>oasDescriptions Checks operation descriptions have been set, and meet a minimum word count.
The function will check for both a description AND a summary. If neither is found, then a warning will be triggered.
How do I use this function? pattern is configured by the following functionOptions
NAME DESCRIPTION TYPE REQUIRED? minWords Minimum words that must be included (default is 1) integer yes Example ruleset configuration operation-descriptions: description: &amp;#34;Operations should have at least 5 words&amp;#34; type: &amp;#34;validation&amp;#34; recommended: true severity: &amp;#34;warn&amp;#34; given: &amp;#34;$&amp;#34; then: function: &amp;#34;oasDescriptions&amp;#34; functionOptions: minWords: 5 The function is used by the operation-descriptions Rule</description></item><item><title>oas2-host-trailing-slash</title><link>https://quobix.com/vacuum/rules/information/oas2-host-trailing-slash/</link><pubDate>Sun, 26 Jun 2022 14:58:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/information/oas2-host-trailing-slash/</guid><description>JSON Path: $.host The host value cannot end with a trailing slash. The addition of a slash will create invalid URI&amp;rsquo;s when consumed by tools.
Why did this violation appear? &amp;lsquo;/&amp;rsquo; was found at the end of the host property of the specification.
Bad example host: &amp;#34;quobix.com/&amp;#34; schemes: - &amp;#34;https&amp;#34; paths: /vacuum: ... Will generate quobix.com//vacuum. The double slash comes from leaving it on the end of the host.
Good example host: &amp;#34;quobix.</description></item><item><title>oas3-host-trailing-slash</title><link>https://quobix.com/vacuum/rules/information/oas3-server-trailing-slash/</link><pubDate>Sun, 26 Jun 2022 14:58:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/information/oas3-server-trailing-slash/</guid><description>JSON Path: $.servers[*] The url value cannot end with a trailing slash. The addition of a slash will create invalid URI&amp;rsquo;s when consumed by tools.
why is this rule not recommended? This rule is also covered by the oas3-api-servers rule. If you enable both of these rules, then you will see a &amp;lsquo;double&amp;rsquo; hit. Why did this violation appear? &amp;lsquo;/&amp;rsquo; was found at the end of the url property of the specification.</description></item><item><title>pattern</title><link>https://quobix.com/vacuum/functions/core/pattern/</link><pubDate>Sun, 26 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/core/pattern/</guid><description>pattern is going to perform a regular expression check.
Supply a JSON Path and the regex that you want to match or notMatch.
vacuum uses Go RE2 Syntax for regular expressions.
How do I use this function? pattern is configured by the following functionOptions
NAME DESCRIPTION TYPE REQUIRED? match If set, value must match the regex pattern string no notMatch If set, value must not match the regex pattern string no Example ruleset configuration oas2-host-trailing-slash: description: &amp;#34;Host URL should not contain a trailing slash&amp;#34; type: style recommended: true given: &amp;#34;$.</description></item><item><title>oas2-host-not-example</title><link>https://quobix.com/vacuum/rules/information/oas2-host-not-example/</link><pubDate>Sat, 25 Jun 2022 15:58:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/information/oas2-host-not-example/</guid><description>JSON Path: $.host Sometimes the host contains &amp;lsquo;example.com&amp;rsquo;, added during testing phases. Sometimes this is left in when the specification is pushed to production.
Unless the user is the owner of &amp;lsquo;example.com&amp;rsquo;, it&amp;rsquo;s probably a good idea to check for this and any other example-type domains used.
Why did this violation appear? &amp;lsquo;example.com&amp;rsquo; was found in the host property of the specification.
Bad example swagger: 2.0 host: &amp;#34;example.com&amp;#34; schemes: - &amp;#34;https&amp;#34; paths: /vacuum: .</description></item><item><title>oas3-host-not-example</title><link>https://quobix.com/vacuum/rules/information/oas3-host-not-example/</link><pubDate>Sat, 25 Jun 2022 15:58:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/information/oas3-host-not-example/</guid><description>JSON Path: $.servers[*].url Sometimes a Server definition url contains &amp;lsquo;example.com&amp;rsquo;, added during testing phases. Sometimes this is left in when the specification is pushed to production.
Unless the user is the owner of &amp;lsquo;example.com&amp;rsquo;, it&amp;rsquo;s probably a good idea to check for this and any other example-type domains used.
Why did this violation appear? &amp;lsquo;example.com&amp;rsquo; was found in the url property of a Server definition.
Bad example openapi: 3.1 servers: - url: &amp;#34;https://example.</description></item><item><title>oas2-api-schemes</title><link>https://quobix.com/vacuum/rules/information/oas2-api-schemes/</link><pubDate>Sat, 25 Jun 2022 15:56:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/information/oas2-api-schemes/</guid><description>In OpenAPI 2 schemes is a string array, that contains URIs that define the HTTP transport types used by the API spec.
Knowing over which HTTP transport an API operates is important for automation and code generation.
A note on HTTP vs HTTPS We should NOT use HTTP in public internet facing APIs. Generally it&amp;rsquo;s OK when used behind a secured API gateway. We should always use HTTPS over HTTP for any public API.</description></item><item><title>openapi-tags</title><link>https://quobix.com/vacuum/rules/tags/openapi-tags/</link><pubDate>Sat, 25 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/tags/openapi-tags/</guid><description>Global Tags define meta-data that can then be used by Operations and Paths Rules
Why did this violation appear? Global tags have not been defined, or they are not an array as required by the schema.
Bad examples No tags defined
openapi: 3.0.1 info: description: &amp;#34;This is a specification&amp;#34; paths: /some/path: ... Tags are not an array
openapi: 3.0.1 tags: name: &amp;#34;Tag&amp;#34; description: &amp;#34;I am a description&amp;#34; info: description: &amp;#34;This is a specification&amp;#34; paths: /some/path: .</description></item><item><title>schema</title><link>https://quobix.com/vacuum/functions/core/schema/</link><pubDate>Sat, 25 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/core/schema/</guid><description>schema is a function that takes a JSON Schema definition, and validates that an object looked up via JSON Path matches that schema. If the object does not exist, the function will trigger a rule violation
How do I use this function? This function is configured by the following functionOptions
NAME DESCRIPTION TYPE REQUIRED? schema The schema you want to evaluate JSON Schema yes Example ruleset configuration openapi-tags: description: Global tags should exist, and be an array type: validation recommended: false given: &amp;#34;$&amp;#34; then: field: &amp;#34;tags&amp;#34; function: &amp;#34;schema&amp;#34; functionOptions: schema: type: &amp;#34;array&amp;#34; items: type: &amp;#34;object&amp;#34; minItems: 1 uniqueItems: true View Spectral Equivalent</description></item><item><title>contact-properties</title><link>https://quobix.com/vacuum/rules/information/contact-properties/</link><pubDate>Fri, 24 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/information/contact-properties/</guid><description>JSON Path: $.info.contact Contact Information should be pretty self-explanatory (I hope). Anyone publishing an OpenAPI contract, should include details of who they are, and how to contact them.
Why did this violation appear? One of more contact details are missing from the contract.
What is this rule checking for? The following properties are checked to ensure they have been defined.
name url email Bad example Missing url and email
info: contact: name: Chicken Nugget Inc.</description></item><item><title>info-contact</title><link>https://quobix.com/vacuum/rules/information/info-contact/</link><pubDate>Fri, 24 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/information/info-contact/</guid><description>JSON Path: $.info Contact Information should be pretty self-explanatory (I hope). This rule checks that the contact object has been set on the Information Object
Why did this violation appear? There is no contact object set in the info object. The info object may also be missing.
What is this rule checking for? The following properties are checked to ensure they have been defined.
info contact Bad example info: title: Chicken Nuggets Inc.</description></item><item><title>info-description</title><link>https://quobix.com/vacuum/rules/information/info-description/</link><pubDate>Fri, 24 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/information/info-description/</guid><description>JSON Path: $.info The Info Object should always have a description defined.
Think about the kind of questions that someone consuming the contract would want to know. A description should try to answer questions like:
What is this API contract about? Why does it exist? Why should I use it? Who built it? Where can I learn more? Why did this violation appear? There is no description defined in the info object.</description></item><item><title>info-license</title><link>https://quobix.com/vacuum/rules/information/info-license/</link><pubDate>Fri, 24 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/information/info-license/</guid><description>JSON Path: $.info The Info Object should have a license defined.
What is a license for? It helps consumers of the API understand how it can be used when consumed for commercial purposes. To help choose a license, Choose A License can help.
A License Object has two properties.
name url Why did this violation appear? There is no license object defined as part of the info object. The info object may also be missing entirely.</description></item><item><title>license-url</title><link>https://quobix.com/vacuum/rules/information/license-url/</link><pubDate>Fri, 24 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/information/license-url/</guid><description>JSON Path: $.info.license A License Object should have a url defined.
What is a license for? It helps consumers of the API understand how it can be used when consumed for commercial purposes. To help choose a license, Choose A License can help.
Why did this violation appear? There is no url object defined as part of the license object. The license object may also be missing entirely.
Bad example info: title: Chicken Nuggets Inc.</description></item><item><title>no-eval-in-markdown</title><link>https://quobix.com/vacuum/rules/validation/no-eval-in-markdown/</link><pubDate>Fri, 24 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/validation/no-eval-in-markdown/</guid><description>Some tools use JavaScript to render OpenAPI docs. They can be vulnerable to XSS attacks if they render HTML/markdown from descriptions that contain malicious eval() calls.
Why did this violation appear? There is JavaScript code using eval() defined in a description value.
Bad example paths: /snakes/cakes: post: description: &amp;#34;This is a hack attack. eval(&amp;#39;alert(\&amp;#39;hacked!\&amp;#39;)&amp;#39;)&amp;#34;; How do I fix this violation? Ensure there is no JavaScript or &amp;lt;script/&amp;gt; tags in any description.</description></item><item><title>no-script-tags-in-markdown</title><link>https://quobix.com/vacuum/rules/validation/no-script-tags-in-markdown/</link><pubDate>Fri, 24 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/validation/no-script-tags-in-markdown/</guid><description>Some tools use JavaScript to render OpenAPI docs. They can be vulnerable to XSS attacks if they render HTML/markdown from descriptions that contain malicious &amp;lt;script&amp;gt; code.
This rule protects against potentially being attacked by malicious code. It&amp;rsquo;s a really bad idea to execute randomly sourced remote JavaScript from within your own application.
Why did this violation appear? There is JavaScript code being injected via a &amp;lt;script&amp;gt; tag defined in a description value.</description></item><item><title>openapi-tags-alphabetical</title><link>https://quobix.com/vacuum/rules/tags/openapi-tags-alphabetical/</link><pubDate>Fri, 24 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/tags/openapi-tags-alphabetical/</guid><description>JSON Path: $.tags If you want to ensure readability for humans, it can make things much easier to read if tags are listed alphabetically.
Why did this violation appear? Global tags are not listed alphabetically for one or more operations.
Bad example tags: - name: &amp;#34;Nuggets&amp;#34; description: &amp;#34;Chicken nuggets&amp;#34; - name: &amp;#34;Apples&amp;#34; description: &amp;#34;Apples are great&amp;#34; Good Example tags: - name: &amp;#34;Apples&amp;#34; description: &amp;#34;Apples are great&amp;#34; - name: &amp;#34;Nuggets&amp;#34; description: &amp;#34;Chicken nuggets&amp;#34; How do I fix this violation?</description></item><item><title>alphabetical</title><link>https://quobix.com/vacuum/functions/core/alphabetical/</link><pubDate>Fri, 24 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/core/alphabetical/</guid><description>alphabetical will check that a given array via a JSON Path is ordered alphabetically.
The value should not be false or an empty string &amp;quot;&amp;quot; or null
How do I use this function? This function is configured by the following functionOptions. Essentially the keyedBy value is the property of the object, that is to be checked for alphabetic ordering.
NAME DESCRIPTION TYPE REQUIRED? keyedBy the key to for sorting objects string no Example ruleset configuration openapi-tags-alphabetical: description: &amp;#34;Tags should be in alphabetical order.</description></item><item><title>noEvalDescription</title><link>https://quobix.com/vacuum/functions/openapi/noevaldescription/</link><pubDate>Fri, 24 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/noevaldescription/</guid><description>noEvalDescription checks every description in the specification to ensure there are no eval() JavaScript statements being made.
The function is used by the no-eval-in-markdown Rule
This function is configured using functionOptions that define the regular expression used to check descriptions. The input name is pattern.
View Function Source</description></item><item><title>truthy</title><link>https://quobix.com/vacuum/functions/core/truthy/</link><pubDate>Fri, 24 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/core/truthy/</guid><description>truthy will check that a given JSON Path exists, or has been defined.
The value should not be false or an empty string &amp;quot;&amp;quot; or null
Example ruleset configuration my-important-rule: description: This is an important rule message: &amp;#34;&amp;#39;chicken&amp;#39; or &amp;#39;nugget&amp;#39; is missing! Oh no! You need to add it!&amp;#34; given: $.some.path then: - field: chicken function: truthy - field: nugget function: truthy View Spectral Equivalent
View Function Source</description></item><item><title>operation-success-response</title><link>https://quobix.com/vacuum/rules/operations/operation-success-response/</link><pubDate>Tue, 21 Jun 2022 09:23:21 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/operation-success-response/</guid><description>Check every Operation Response has either a 2xx or 3xx response code.
An operation isn&amp;rsquo;t much use, unless it returns an OK status code (2xx), or a Redirect/Choice status code (3xx)
Why did this violation appear? There is an Operation Response in your specification that isn&amp;rsquo;t returning a success response.
What is this rule checking for? Every Operation Response is checked for the following:
2xx or 3xx Response code A good example.</description></item><item><title>operation-operationId</title><link>https://quobix.com/vacuum/rules/operations/operation-operationid/</link><pubDate>Mon, 20 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/operation-operationid/</guid><description>Every operation must have an operationId. It&amp;rsquo;s critical that all Operation&amp;rsquo;s have an identifier.
An operationId is used by documentation tools, code generators and mocking engines. It&amp;rsquo;s used to define page names, URI&amp;rsquo;s and method names in auto-generated code.
Why did this violation appear? There is an Operation in your specification that has not defined an operationId.
What is this rule checking for? Every Operation is checked for the following</description></item><item><title>operation-operationId-unique</title><link>https://quobix.com/vacuum/rules/operations/operation-operationid-unique/</link><pubDate>Mon, 20 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/operation-operationid-unique/</guid><description>Every operation must have an operationId that is unique. It&amp;rsquo;s critical that all Operation&amp;rsquo;s can be identified independently, without the need to analyze the path, params and verbs to locate an operation.
An operationId is used by documentation tools, code generators and mocking engines. It&amp;rsquo;s used to define page names, URI&amp;rsquo;s and method names in auto-generated code.
It needs to be unique so there are no clashes with other operations (nothing else can share that ID).</description></item><item><title>operation-parameters</title><link>https://quobix.com/vacuum/rules/operations/operation-parameters/</link><pubDate>Mon, 20 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/operation-parameters/</guid><description>Operation Parameters can be described through paths, headers cookies and queries.
It&amp;rsquo;s important to ensure that none of these parameters are duplicates, which is easier that you may think, when an operation has multiple parameter definitions across different types.
Why did this violation appear? There is a Parameter in the specification that has been duplicated or it&amp;rsquo;s using multiple input types
What is this rule checking for? Every Operation is checked for the following</description></item><item><title>operation-singular-tag</title><link>https://quobix.com/vacuum/rules/tags/operation-singular-tag/</link><pubDate>Mon, 20 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/tags/operation-singular-tag/</guid><description>Operation Tags are used to define operation categories or groups.
Tools use tags differently when generating code, or documentation. Sometimes, multiple tags can interfere with how tools operate.
To be honest, this rule is a bit obscure, generally it&amp;rsquo;s not recommended unless there is a specific use case for it.
Why did this violation appear? Multiple tags have been used in an operation.
What is this rule checking for? Every Operation is only allowed a single tag to be defined</description></item><item><title>operation-tag-defined</title><link>https://quobix.com/vacuum/rules/tags/operation-tag-defined/</link><pubDate>Mon, 20 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/tags/operation-tag-defined/</guid><description>Operation Tags are used to define operation categories or groups.
Sometimes, tags that have been defined for an operation, have not been defined as part of the global scope of the specification.
This is technically allowed, however it&amp;rsquo;s Bad OpenAPI hygiene. The rule will throw a warning. Make sure tags used by operations are always defined in the global scope of the document.
Why did this violation appear? A tag was used in an operation, without that tag being defined in the global scope.</description></item><item><title>path-params</title><link>https://quobix.com/vacuum/rules/operations/path-params/</link><pubDate>Mon, 20 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/path-params/</guid><description>Path Parameters are pretty easy to get wrong.
Sometimes, they can be defined, but never used, or used but never defined. Sometimes they are duplicated, or set to required, but then are not defined.
There is a whole raft of issues that can appear with Path Parameters, so this rule is one of the more complex ones.
Why did this violation appear? An operation has used path parameters, but has incorrectly implemented them.</description></item><item><title>oas2-valid-schema-example</title><link>https://quobix.com/vacuum/rules/examples/oas2-valid-schema-example/</link><pubDate>Sun, 19 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/rules/examples/oas2-valid-schema-example/</guid><description>Examples are really important. When defining an OpenAPI specification, it&amp;rsquo;s critical that every operation request and response have examples defined for them. The same applies to definitions defined as references.
Examples help consumers of your API understand what real data should actually look like when sending requests, or listening for responses.
Good examples are particularly valuable when data is complex, deep, nested or contains special formatting.
Why did this violation appear?</description></item><item><title>oas3-valid-schema-example</title><link>https://quobix.com/vacuum/rules/examples/oas3-valid-schema-example/</link><pubDate>Sun, 19 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/rules/examples/oas3-valid-schema-example/</guid><description>Examples are really important. When defining an OpenAPI specification, it&amp;rsquo;s critical that every operation request and response have examples defined for them. The same applies to definitions defined as references.
Examples help consumers of your API understand what real data should actually look like when sending requests, or listening for responses.
Good examples are particularly valuable when data is complex, deep, nested or contains special formatting.
Why did this violation appear?</description></item><item><title>oasExample</title><link>https://quobix.com/vacuum/functions/openapi/oasexample/</link><pubDate>Sun, 19 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasexample/</guid><description>oasExample will scan an OpenAPI specification looking for violations around examples.
The function is used by the oas2-valid-schema-example and oas3-valid-schema-example Rules.
View Function Source</description></item><item><title>oasOpId</title><link>https://quobix.com/vacuum/functions/openapi/oasopid/</link><pubDate>Sun, 19 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasopid/</guid><description>oasOpId will scan an OpenAPI specification looking at each operation, and ensuring an operationId has been defined.
The function is used by the operation-operationId Rule
View Spectral Equivalent
View Function Source</description></item><item><title>oasOpIdUnique</title><link>https://quobix.com/vacuum/functions/openapi/oasopidunique/</link><pubDate>Sun, 19 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasopidunique/</guid><description>oasOpIdUnique will scan an OpenAPI specification looking at each operation, and ensuring that its operationId is unique within the specification
The function is used by the operation-operationId-unique Rule
View Function Source</description></item><item><title>oasOpParams</title><link>https://quobix.com/vacuum/functions/openapi/oasopparams/</link><pubDate>Sun, 19 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasopparams/</guid><description>oasOpParams will scan an OpenAPI specification looking at each operation, checking unique and non-repeating parameters.
The function is used by the operation-parameters Rule
View Function Source</description></item><item><title>oasOpSingleTag</title><link>https://quobix.com/vacuum/functions/openapi/oasopsingletag/</link><pubDate>Sun, 19 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasopsingletag/</guid><description>oasOpSingularTag will scan an OpenAPI specification looking at each operation, checking there is only a single tag defined per operation.
The function is used by the operation-singular-tag Rule
View Function Source</description></item><item><title>oasOpSuccessResponse</title><link>https://quobix.com/vacuum/functions/openapi/oasopsuccessresponse/</link><pubDate>Sun, 19 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oasopsuccessresponse/</guid><description>oasOpSuccessResponse will scan an OpenAPI specification looking at each operation, and ensuring at least one 2xx or 3xx HTTP responses has been defined.
The function is used by the operation-success-response Rule
View Function Source</description></item><item><title>oasPathParam</title><link>https://quobix.com/vacuum/functions/openapi/oaspathparam/</link><pubDate>Sun, 19 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oaspathparam/</guid><description>oasPathParam will scan an OpenAPI specification looking at each path paramter, and ensure&amp;rsquo;s that it&amp;rsquo;s not been duplicated, is correctly used and implements types correctly.
The function is used by the path-params Rule
View Function Source</description></item><item><title>oasTagDefined</title><link>https://quobix.com/vacuum/functions/openapi/oastagdefined/</link><pubDate>Sun, 19 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/functions/openapi/oastagdefined/</guid><description>oasTagDefined will scan an OpenAPI specification looking at each operation&amp;rsquo;s tags. Those tags are checked against the global tags defined for the document. Anything that does not align (is missing globally) will be returned.
The function is used by the operation-tag-defined Rule
View Function Source</description></item><item><title>Understanding RuleSets</title><link>https://quobix.com/vacuum/rulesets/understanding/</link><pubDate>Sun, 19 Jun 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/rulesets/understanding/</guid><description>RuleSets are how to configure vacuum to know which rules to run for each specification, and how it should evaluate those rules.
A RuleSet is a style guide with each rule being an individual requirement as a part of the overall guide.
What does a RuleSet look like? vacuum has based RuleSet configuration on the Spectral Ruleset model. This means Spectral RuleSets are 100% compatible with vacuum1
vacuum has added an id value to the rule (which Spectral does not), this to allow backwards compatibility, and the freedom to rename and add new names to new vacuum only content.</description></item><item><title>What is vacuum?</title><link>https://quobix.com/vacuum/about/</link><pubDate>Sun, 12 Jun 2022 06:25:04 -0400</pubDate><guid>https://quobix.com/vacuum/about/</guid><description>vacuum is an ultra-super-fast, lightweight OpenAPI linter and quality checking tool, inspired by Spectral.
It&amp;rsquo;s also compatible with existing Spectral rulesets and generates compatible Spectral reports.
vacuum can suck all the lint of a 5mb OpenAPI spec in about 250ms. Designed to reliably lint OpenAPI specifications, very, very quickly. Including very large ones. Spectral. can be quite slow when used as an API and does not scale for enterprise applications.</description></item><item><title>Installing vacuum</title><link>https://quobix.com/vacuum/installing/</link><pubDate>Sun, 12 Jun 2022 06:25:04 -0400</pubDate><guid>https://quobix.com/vacuum/installing/</guid><description>Install via homebrew. This the recommended approach. If you&amp;rsquo;re on MacOS or Linux, the easiest way to install vacuum is via homebrew.
brew install Install via NPM npm install Install via yarn yarn global add Install via curl This is perhaps the most simple for CD/CD pipelines.
curl install Install via Docker. vacuum is available as a container, pull the image from Docker Hub.
docker pull To run via docker, add dshanley/vacuum as the docker command, like so:</description></item><item><title>Quick Start</title><link>https://quobix.com/vacuum/start/</link><pubDate>Sun, 12 Jun 2022 06:25:04 -0400</pubDate><guid>https://quobix.com/vacuum/start/</guid><description>Install vacuum via homebrew This the recommended approach. If you&amp;rsquo;re on MacOS or Linux, the easiest way to install vacuum is via homebrew.
install Lint your OpenAPI Specification Run the lint command with the -d (details) flag set:
lint Learn more about the lint command.
Explore the results through the console dashboard Run the dashboard command:
explore dashboard Learn more about the dashboard command.
Explore the results through an HTML report Run the html-report command:</description></item><item><title>How to beat Impostor Syndrome</title><link>https://quobix.com/articles/impostor-syndrome/</link><pubDate>Tue, 08 Mar 2022 10:46:55 -0500</pubDate><guid>https://quobix.com/articles/impostor-syndrome/</guid><description>Ah, we meet again, my old friend. After recently joining Splunk, I got to experience a bit of an old nemesis of mine after being bombarded by firehoses of new data and information. It&amp;rsquo;s been a while since I felt it, but it&amp;rsquo;s no less awful than I remember.
Over the years, I&amp;rsquo;ve learned how to re-orient my thinking when that feeling appears. This article describes how I deal with it and some techniques that might be helpful to you.</description></item><item><title>Hello, Splunk!</title><link>https://quobix.com/articles/hello-splunk/</link><pubDate>Mon, 07 Feb 2022 14:19:38 -0500</pubDate><guid>https://quobix.com/articles/hello-splunk/</guid><description>A distinguished engineer Today I started a brand new role at Splunk. I&amp;rsquo;ve joined as Distinguished Engineer in the Security group as UI Architect of SaaS Applications.
In 1997 I founded hack-net.com (don&amp;rsquo;t visit the site). It was one of the most significant security-related websites on the internet for a while. We used to get millions of visitors a week and had 20+ contributors on the platform.
What happened to it?</description></item><item><title>How to build a React based pub-sub client using WebSockets and JavaScript</title><link>https://quobix.com/articles/react-pubsub-websockets/</link><pubDate>Mon, 24 Jan 2022 09:14:17 -0500</pubDate><guid>https://quobix.com/articles/react-pubsub-websockets/</guid><description>Watch the video This is quick tutorial to help you understand the basic mechanics of how Pub-Sub works and how you can call an asynchronous API from a browser using JavaScript, STOMP, and WebSockets. We&amp;rsquo;re going to build a simple
If you&amp;rsquo;re not familiar with STOMP, it stands for (S)imple (T)ext (O)riented (M)essaging (P)rotocol. It&amp;rsquo;s a straightforward but stable protocol that makes interacting with a message or event-based APIs a breeze.</description></item><item><title>Thank you, VMware.</title><link>https://quobix.com/articles/thanks-vmware/</link><pubDate>Mon, 17 Jan 2022 08:06:56 -0500</pubDate><guid>https://quobix.com/articles/thanks-vmware/</guid><description>This is my story about the most incredible time I had at VMware. I want to tell you about the most valuable experience I had; it&amp;rsquo;s the one thing that I can never thank VMware enough for.
A bumpy arrival In early 2012, I was the CTO of a failing start-up that I co-founded. Money had dried up; I had to let go of everything.
I had recently emigrated to the USA from the UK, and my (ex) wife was divorcing me because she had fallen in love with another man she had met while I was trying to build a business.</description></item><item><title>How to create a streaming AsyncAPI microservice using golang.</title><link>https://quobix.com/articles/asyncapi-streaming-using-golang/</link><pubDate>Tue, 21 Dec 2021 13:07:35 -0400</pubDate><guid>https://quobix.com/articles/asyncapi-streaming-using-golang/</guid><description>Watch the video If you want to learn more about AsyncAPI, head over to AsyncAPI.com and find out more about the standard and the power it provides us.
Moving forward, I will assume that you already know what AsyncAPI is and want to use it in your golang applications.
If you want to check out the source of this article it can be found on GitHub. 1. Getting started We&amp;rsquo;re going to create a microservice that exposes a single streaming API via AsyncAPI.</description></item><item><title>How to create an event-driven API via AsyncAPI using golang.</title><link>https://quobix.com/articles/asyncapi-pubsub-using-golang/</link><pubDate>Thu, 16 Dec 2021 13:07:35 -0400</pubDate><guid>https://quobix.com/articles/asyncapi-pubsub-using-golang/</guid><description>Watch the video If you want to learn more about AsyncAPI, head over to AsyncAPI.com and find out more about the standard and the power it provides us.
Moving forward, I will assume that you already know what AsyncAPI is and want to use it in your golang applications.
If you want to check out the source of this article it can be found on GitHub. 1. Getting started We&amp;rsquo;re going to create a microservice that exposes Publish and Subscribe endpoints defined by AsyncAPI.</description></item><item><title>M.A.R.V.I.N</title><link>https://quobix.com/articles/marvin/</link><pubDate>Tue, 09 Nov 2021 09:17:42 -0400</pubDate><guid>https://quobix.com/articles/marvin/</guid><description>It was February 2013, and I had just moved to San Francisco. I had been working for VMware for around eight months.
I was excited to be working (finally) in Silicon Valley; A dream of mine since childhood.
One wintery afternoon, Mornay Van Der Walt Called me into his office. He asked me
&amp;ldquo;Do you think we could build a prototype that installs and configures an entire SDDC in a hyper-converged infrastructure appliance format and do it in under 15 Minutes&amp;rdquo;?</description></item><item><title>TrashBox, Engineering a solution to memory loss.</title><link>https://quobix.com/articles/trashbox/</link><pubDate>Thu, 30 Sep 2021 15:23:07 -0400</pubDate><guid>https://quobix.com/articles/trashbox/</guid><description>&amp;ldquo;Dammit, why am I unable to get this under control!&amp;rdquo; I thought to myself as I ran, dragging two weeks worth of hot, stinking garbage toward the collection truck that was just about to drive past my house again.
It&amp;rsquo;s late August in Virginia in 2017, which isn&amp;rsquo;t great for storing garbage outside your house. My wife is newly pregnant and understandably losing her patience with me.
Hot and annoyed at myself, I reach for my pocket (and remember I&amp;rsquo;m still in my underpants), suddenly it dawns on me:</description></item><item><title>Legal Disclaimer</title><link>https://quobix.com/disclaimer/</link><pubDate>Mon, 27 Sep 2021 13:36:21 -0400</pubDate><guid>https://quobix.com/disclaimer/</guid><description>The views and opinions expressed on this site are mine and mine alone.
I do not represent my employer in anyway and I take full responsibility for any of the content found here.
Please don&amp;rsquo;t sue me ❤️.</description></item><item><title>I am sorry</title><link>https://quobix.com/sorry/</link><pubDate>Mon, 27 Sep 2021 11:14:19 -0400</pubDate><guid>https://quobix.com/sorry/</guid><description>Hi Friend,
I just wanted to say, that I am sorry if I have offended you.
There isn&amp;rsquo;t ever a situation in which I am trying to be hurtful, or exert rudeness (I hate both of those things).
If you have experienced emotional distress because of something I did, said or wrote, then please accept my genuine apology ♥️.
Sometimes, I misread intent. Sometimes I forget how brutal even the most innocent words can be, when used in a certain context.</description></item><item><title>What is Experience Engineering?</title><link>https://quobix.com/articles/experience-engineering/</link><pubDate>Sun, 26 Sep 2021 13:07:35 -0400</pubDate><guid>https://quobix.com/articles/experience-engineering/</guid><description>OK, so I know I just said that it&amp;rsquo;s an actual term. It&amp;rsquo;s a term that I&amp;rsquo;ve kind of made up. It is, however, composed of real things that all revolve around designing and building experiences.
More than just user interface It&amp;rsquo;s easy to default to &amp;ldquo;&amp;hellip;oh you mean UI, right?&amp;rdquo; when talking about engineering experiences.
The reality, however, is the term &amp;lsquo;UI&amp;rsquo; means more than a browser-based application. UI goes way beyond that.</description></item><item><title>Author</title><link>https://quobix.com/author/</link><pubDate>Wed, 22 Sep 2021 16:50:55 -0400</pubDate><guid>https://quobix.com/author/</guid><description>Hi, I&amp;rsquo;m Dave Shanley.
I&amp;rsquo;m a hacker, product guy, software architect, inventor, technical leader, and failed musician.
I have about twenty-five years of experience with designing and building software and software products across various industries and businesses.
My specialty is Experience Engineering, which generally means that I design and build technology that you engage with as a consumer.
I work as a Distinguished Engineer at Splunk
Making complex things feel simple and intuitive.</description></item><item><title>oas2-unused-definition</title><link>https://quobix.com/vacuum/rules/schemas/oas2-unused-definition/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quobix.com/vacuum/rules/schemas/oas2-unused-definition/</guid><description>Definitions in OpenAPI 2 (Swagger) are reusable/sharable schema definitions. Any other object can reference it, to save duplication.
Sometimes schema definitions are never referenced from anywhere, they are &amp;lsquo;unused&amp;rsquo; or &amp;lsquo;orphaned&amp;rsquo;.
This could be an oversight, it could be a case where the spec was changed and new schemas have replaced older ones, and those older schema definitions were never removed.
It&amp;rsquo;s good contract hygiene to prune anything that isn&amp;rsquo;t used, out of it.</description></item></channel></rss>