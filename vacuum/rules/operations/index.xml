<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Operation and Path Rules on quobix</title><link>https://quobix.com/vacuum/rules/operations/</link><description>Recent content in Operation and Path Rules on quobix</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 19 Jun 2022 07:39:53 -0400</lastBuildDate><atom:link href="https://quobix.com/vacuum/rules/operations/index.xml" rel="self" type="application/rss+xml"/><item><title>paths-kebab-case</title><link>https://quobix.com/vacuum/rules/operations/paths-kebab-case/</link><pubDate>Tue, 19 Jul 2022 09:00:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/paths-kebab-case/</guid><description>Paths should not use underscores or uppercase letters. Neither should they be empty.
Servers may or may not be case-sensitive, so everything should be lowercase, there is no good reason for uppercase path segments.
Why did this violation appear? A segment in one of the paths defined in the specification, is not kebab-case
What is this rule checking for? Every path segment isn&amp;rsquo;t empty, and if not a variable - checks the value is kebab-case.</description></item><item><title>no-http-verbs-in-path</title><link>https://quobix.com/vacuum/rules/operations/no-http-verbs-in-path/</link><pubDate>Tue, 19 Jul 2022 06:23:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/no-http-verbs-in-path/</guid><description>When HTTP verbs (get/post/put etc.) are used in path segments, it muddies the semantics of REST and creates a confusing and inconsistent experience.
It&amp;rsquo;s highly recommended that verbs are not used in path segments. Replace those HTTP verbs with more meaningful nouns.
Why did this violation appear? An HTTP verb appeared as part of a segment of a path.
What is this rule checking for? Every path segment does not contain a known HTTP verb.</description></item><item><title>no-ambiguous-paths</title><link>https://quobix.com/vacuum/rules/operations/no-ambiguous-paths/</link><pubDate>Sun, 17 Jul 2022 11:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/no-ambiguous-paths/</guid><description>Every path in an OpenAPI specification, should be unambiguous and clearly resolvable. What this essentially means is that each path should be able to be resolved independently when using variables in path segments.
For example &amp;lsquo;/burgers/{burgerId}&amp;rsquo; and &amp;lsquo;/{foodType}/burgers&amp;rsquo; are ambiguous, they can&amp;rsquo;t be resolved and either could trigger a different operation.
Why did this violation appear? Ambiguous paths were detected, paths that can&amp;rsquo;t be used together in the same specification.</description></item><item><title>operation-4xx-response</title><link>https://quobix.com/vacuum/rules/operations/operation-4xx-response/</link><pubDate>Sun, 17 Jul 2022 09:23:21 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/operation-4xx-response/</guid><description>Check every Operation Response defines at least one 4xx error code.
Consumers of your API are always going to send bad data. Unless operations return at least one User Error status code (4xx), the consumer of the API has no idea if they are using it correctly.
Why did this violation appear? There is an Operation Response in your specification that isn&amp;rsquo;t returning at least one 4xx error code.
What is this rule checking for?</description></item><item><title>oas2-operation-formData-consume-check</title><link>https://quobix.com/vacuum/rules/operations/oas2-operation-formdata-consume-check/</link><pubDate>Wed, 29 Jun 2022 05:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/oas2-operation-formdata-consume-check/</guid><description>Operations with the in: formData parameter,
must include &amp;lsquo;application/x-www-form-urlencoded&amp;rsquo; or &amp;lsquo;multipart/form-data&amp;rsquo; in their consumes property.
Why did this violation appear? When using in: formData, the consumes property needs to be set to a valid type.
Bad example swagger: 2.0 paths: /survey: parameters: - in: formData name: &amp;#34;name&amp;#34; type: string description: &amp;#34;A person&amp;#39;s name.&amp;#34; - in: formData name: &amp;#34;fav_number&amp;#34; type: number description: &amp;#34;A person&amp;#39;s favorite number&amp;#34; post: consumes: - &amp;#34;chicken-soup/and-cake&amp;#34; ... Good example swagger: 2.</description></item><item><title>path-declarations-must-exist</title><link>https://quobix.com/vacuum/rules/operations/path-declarations-must-exist/</link><pubDate>Wed, 29 Jun 2022 05:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/path-declarations-must-exist/</guid><description>JSON Path: $.paths When defining Paths and using Path Parameters It&amp;rsquo;s important to not add blank declarations.
This rule checks that no paths is using empty path parameters.
Why did this violation appear? One or more paths definitions has an empty parameter defined.
Bad example paths: /pizza/{}/{icecream}: get: parameters: - in: path name: &amp;#34;icecream&amp;#34; ... Good example paths: /pizza/{cake}/{icecream}: get: parameters: - in: path name: &amp;#34;cake&amp;#34; - in: path name: &amp;#34;icecream&amp;#34; .</description></item><item><title>path-keys-no-trailing-slash</title><link>https://quobix.com/vacuum/rules/operations/path-keys-no-trailing-slash/</link><pubDate>Wed, 29 Jun 2022 05:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/path-keys-no-trailing-slash/</guid><description>JSON Path: $.paths When defining Paths, it&amp;rsquo;s important to not include a trailing slash at the end of the path definition.
It&amp;rsquo;s good hygiene to keep trailing slashes off paths, mainly because it can confuse tooling that use the specification for generating code, mocking or other applications. Some tools will get confused, some tools won&amp;rsquo;t care.
Example of trailing slashes borking things up If we have two paths:
somedomain.com/some/path/ somedomain.com/some/path Some tools will treat this as two separate paths, some tools will see them as the same.</description></item><item><title>path-not-include-query</title><link>https://quobix.com/vacuum/rules/operations/path-not-include-query/</link><pubDate>Wed, 29 Jun 2022 05:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/path-not-include-query/</guid><description>JSON Path: $.paths This rule checks to ensure a paths definition does not contain a Query string.
The mistake is actually quite common with authors new to the OpenAPI standard. It happens all the time.
Why did this violation appear? One or more paths definitions contains a query string.
Bad example paths: /deserts/icecream?sprinkles=true: get: parameters: ... Good example paths: /deserts/icecream: get: parameters: - in: query name: &amp;#34;sprinkles&amp;#34; ... How do I fix this violation?</description></item><item><title>operation-operationId-valid-in-url</title><link>https://quobix.com/vacuum/rules/operations/operation-operationid-valid-in-url/</link><pubDate>Tue, 28 Jun 2022 05:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/operation-operationid-valid-in-url/</guid><description>This rule is going to be re-written. Its behavior will not change, however the current implementation is not satisfactory. An Operation should always contain an operationId. This rule will check the value used is friendly to being used as part of a URL.
Documentation and code generation tools depend on this value being unique and often use it as part of URL paths.
Why did this violation appear? The operationId for one or more Operation definitions is not URL friendly.</description></item><item><title>operation-success-response</title><link>https://quobix.com/vacuum/rules/operations/operation-success-response/</link><pubDate>Tue, 21 Jun 2022 09:23:21 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/operation-success-response/</guid><description>Check every Operation Response has either a 2xx or 3xx response code.
An operation isn&amp;rsquo;t much use, unless it returns an OK status code (2xx), or a Redirect/Choice status code (3xx)
Why did this violation appear? There is an Operation Response in your specification that isn&amp;rsquo;t returning a success response.
What is this rule checking for? Every Operation Response is checked for the following:
2xx or 3xx Response code A good example.</description></item><item><title>operation-operationId</title><link>https://quobix.com/vacuum/rules/operations/operation-operationid/</link><pubDate>Mon, 20 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/operation-operationid/</guid><description>Every operation must have an operationId. It&amp;rsquo;s critical that all Operation&amp;rsquo;s have an identifier.
An operationId is used by documentation tools, code generators and mocking engines. It&amp;rsquo;s used to define page names, URI&amp;rsquo;s and method names in auto-generated code.
Why did this violation appear? There is an Operation in your specification that has not defined an operationId.
What is this rule checking for? Every Operation is checked for the following</description></item><item><title>operation-operationId-unique</title><link>https://quobix.com/vacuum/rules/operations/operation-operationid-unique/</link><pubDate>Mon, 20 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/operation-operationid-unique/</guid><description>Every operation must have an operationId that is unique. It&amp;rsquo;s critical that all Operation&amp;rsquo;s can be identified independently, without the need to analyze the path, params and verbs to locate an operation.
An operationId is used by documentation tools, code generators and mocking engines. It&amp;rsquo;s used to define page names, URI&amp;rsquo;s and method names in auto-generated code.
It needs to be unique so there are no clashes with other operations (nothing else can share that ID).</description></item><item><title>operation-parameters</title><link>https://quobix.com/vacuum/rules/operations/operation-parameters/</link><pubDate>Mon, 20 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/operation-parameters/</guid><description>Operation Parameters can be described through paths, headers cookies and queries.
It&amp;rsquo;s important to ensure that none of these parameters are duplicates, which is easier that you may think, when an operation has multiple parameter definitions across different types.
Why did this violation appear? There is a Parameter in the specification that has been duplicated or it&amp;rsquo;s using multiple input types
What is this rule checking for? Every Operation is checked for the following</description></item><item><title>path-params</title><link>https://quobix.com/vacuum/rules/operations/path-params/</link><pubDate>Mon, 20 Jun 2022 15:53:17 -0400</pubDate><guid>https://quobix.com/vacuum/rules/operations/path-params/</guid><description>Path Parameters are pretty easy to get wrong.
Sometimes, they can be defined, but never used, or used but never defined. Sometimes they are duplicated, or set to required, but then are not defined.
There is a whole raft of issues that can appear with Path Parameters, so this rule is one of the more complex ones.
Why did this violation appear? An operation has used path parameters, but has incorrectly implemented them.</description></item></channel></rss>