<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OWASP API Rules on quobix</title><link>https://quobix.com/vacuum/rules/owasp/</link><description>Recent content in OWASP API Rules on quobix</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 05 Jul 2023 12:28:02 -0400</lastBuildDate><atom:link href="https://quobix.com/vacuum/rules/owasp/index.xml" rel="self" type="application/rss+xml"/><item><title>owasp-define-error-responses-429</title><link>https://quobix.com/vacuum/rules/owasp/owasp-define-error-responses-429/</link><pubDate>Wed, 05 Jul 2023 16:56:14 -0400</pubDate><guid>https://quobix.com/vacuum/rules/owasp/owasp-define-error-responses-429/</guid><description>OWASP API Security recommends defining schemas for all responses. This includes the 429 response error code.
JSONPath used $.paths..responses
Bad example openapi: &amp;#34;3.1.0&amp;#34; info: version: &amp;#34;1.0&amp;#34; paths: /: get: responses: 200: description: ok content: &amp;#34;application/problem+json&amp;#34;: Good Example openapi: &amp;#34;3.1.0&amp;#34; info: version: &amp;#34;1.0&amp;#34; paths: /: get: responses: 429: description: ok content: &amp;#34;application/json&amp;#34;: How do I fix this violation? Extend the responses of all endpoints to include 429 response error codes.</description></item><item><title>owasp-rate-limit-retry-after</title><link>https://quobix.com/vacuum/rules/owasp/owasp-rate-limit-retry-after/</link><pubDate>Wed, 05 Jul 2023 16:51:43 -0400</pubDate><guid>https://quobix.com/vacuum/rules/owasp/owasp-rate-limit-retry-after/</guid><description>Ensure that any 429 response, contains a Retry-After header.
JSONPath used $..responses.429.headers
Bad example openapi: 3.1.0 info: version: 1.0.1 paths: /: get: responses: &amp;#34;429&amp;#34;: description: ok headers: &amp;#34;200&amp;#34;: description: ok headers: &amp;#34;Retry-After&amp;#34;: description: standard retry header schema: type: string Good Example openapi: &amp;#34;3.1.0&amp;#34; info: version: 1.0 paths: /cakes: get: responses: &amp;#34;429&amp;#34;: description: OK headers: &amp;#34;Retry-After&amp;#34;: description: standard retry header schema: type: string` How do I fix this violation? Set the Retry-After header in the 429 response.</description></item><item><title>owasp-rate-limit</title><link>https://quobix.com/vacuum/rules/owasp/owasp-rate-limit/</link><pubDate>Wed, 05 Jul 2023 16:43:43 -0400</pubDate><guid>https://quobix.com/vacuum/rules/owasp/owasp-rate-limit/</guid><description>Define proper rate limiting to avoid attackers overloading an API operation.
vacuum applies the following header patters by default:
X-RateLimit-Limit X-Rate-Limit-Limit RateLimit-Limit RateLimit-Reset JSONPath used $.paths..responses
Bad example openapi: 3.1.0 info: version: 1.0 paths: /chicken/nuggets: get: description: get responses: &amp;#34;201&amp;#34;: description: &amp;#34;ok&amp;#34; headers: &amp;#34;SomethingElse&amp;#34;: schema: type: string Good Example openapi: 3.1.0 info: version: 1.0 paths: /: get: responses: &amp;#34;201&amp;#34;: description: ok headers: &amp;#34;X-RateLimit-Limit&amp;#34;: schema: type: string &amp;#34;X-RateLimit-Reset&amp;#34;: schema: type: string` How do I fix this violation?</description></item><item><title>owasp-define-error-responses-500</title><link>https://quobix.com/vacuum/rules/owasp/owasp-define-error-responses-500/</link><pubDate>Wed, 05 Jul 2023 16:30:14 -0400</pubDate><guid>https://quobix.com/vacuum/rules/owasp/owasp-define-error-responses-500/</guid><description>OWASP API Security recommends defining schemas for all responses. This includes the 500 response error code.
JSONPath used $.paths..responses
Bad example openapi: 3.1.0 info: version: 1.0 paths: /no-error-response: get: responses: 200: description: OK content: &amp;#34;application/problem+json&amp;#34;: {} Good Example openapi: 3.1.0 info: version: 1.0 paths: /no-error-response: get: responses: 200: description: OK content: &amp;#34;application/problem+json&amp;#34;: {} 500: description: Server Error! content: &amp;#34;application/problem+json&amp;#34;: {} How do I fix this violation? Extend the responses of all endpoints to include 500 response error codes.</description></item><item><title>owasp-define-error-responses-401</title><link>https://quobix.com/vacuum/rules/owasp/owasp-define-error-responses-401/</link><pubDate>Wed, 05 Jul 2023 16:26:14 -0400</pubDate><guid>https://quobix.com/vacuum/rules/owasp/owasp-define-error-responses-401/</guid><description>OWASP API Security recommends defining schemas for all responses. This includes the 401 response error code.
JSONPath used $.paths..responses
Bad example openapi: 3.1.0 info: version: 1.0 paths: /no-error-response: get: responses: 200: description: OK content: &amp;#34;application/problem+json&amp;#34;: {} Good Example openapi: 3.1.0 info: version: 1.0 paths: /no-error-response: get: responses: 200: description: OK content: &amp;#34;application/problem+json&amp;#34;: {} 401: description: Access Denied! content: &amp;#34;application/problem+json&amp;#34;: {} How do I fix this violation? Extend the responses of all endpoints to include 401 response error codes.</description></item><item><title>owasp-define-error-validation</title><link>https://quobix.com/vacuum/rules/owasp/owasp-define-error-validation/</link><pubDate>Wed, 05 Jul 2023 16:06:10 -0400</pubDate><guid>https://quobix.com/vacuum/rules/owasp/owasp-define-error-validation/</guid><description>Check that an error response of either 400, 422 or 4XX has been defined.
Carefully define schemas for all the API responses, including either 400, 422 or 4XX responses which describe errors caused by invalid request
JSONPath used $.paths..responses
Bad example openapi: 3.1.0 info: version: 1.0 paths: /no-error-response: get: responses: 200: description: OK content: &amp;#34;application/problem+json&amp;#34;: {} Good Example openapi: 3.1.0 info: version: 1.0 paths: /no-error-response: get: responses: 200: description: OK content: &amp;#34;application/problem+json&amp;#34;: {} 422: description: Unprocessable Entity content: &amp;#34;application/problem+json&amp;#34;: {} How do I fix this violation?</description></item><item><title>owasp-protection-global-safe</title><link>https://quobix.com/vacuum/rules/owasp/owasp-protection-global-safe/</link><pubDate>Wed, 05 Jul 2023 16:03:19 -0400</pubDate><guid>https://quobix.com/vacuum/rules/owasp/owasp-protection-global-safe/</guid><description>Check if the operation is protected at operation level. Otherwise, check the global #/security property
Rule was extracted from https://github.com/italia/api-oas-checker/blob/master/security/security.yml
Bad example openapi: 3.0.1 info: version: &amp;#34;1.2.3&amp;#34; title: &amp;#34;securitySchemes&amp;#34; paths: /security-ko-get: get: responses: {} head: security: [] components: securitySchemes: BasicAuth: type: http scheme: basic Good Example openapi: 3.0.1 info: version: &amp;#34;1.2.3&amp;#34; title: &amp;#34;securitySchemes&amp;#34; paths: /security-ko-missing: put: responses: {} post: security: [] /security-ok-put: put: security: - BasicAuth: [] responses: {} /security-ok-get: get: security: - {} responses: {} head: security: - {} - BasicAuth: [] /security-ko-info: post: security: - {} - BasicAuth: [] components: securitySchemes: BasicAuth: type: http scheme: basic How do I fix this violation?</description></item><item><title>owasp-protection-global-unsafe-strict</title><link>https://quobix.com/vacuum/rules/owasp/owasp-protection-global-unsafe-strict/</link><pubDate>Wed, 05 Jul 2023 15:56:10 -0400</pubDate><guid>https://quobix.com/vacuum/rules/owasp/owasp-protection-global-unsafe-strict/</guid><description>APIs should be protected by a security rule at the operation level.
Rule was extracted from https://github.com/italia/api-oas-checker/blob/master/security/security.yml
Bad example openapi: 3.0.1 info: version: &amp;#34;1.2.3&amp;#34; title: &amp;#34;securitySchemes&amp;#34; security: - BasicAuth: [] paths: /security-ko-patch-noauth: patch: security: - {} responses: {} /security-ko-post-noauth: patch: security: - BasicAuth: [] - {} responses: {} components: securitySchemes: BasicAuth: type: http scheme: basic Good Example openapi: 3.0.1 info: version: &amp;#34;1.2.3&amp;#34; title: &amp;#34;securitySchemes&amp;#34; security: - BasicAuth: [] paths: /security-gloabl-ok-put: put: responses: {} /security-ok-put: put: security: - BasicAuth: [] responses: {} components: securitySchemes: BasicAuth: type: http scheme: basic How do I fix this violation?</description></item><item><title>owasp-protection-global-unsafe</title><link>https://quobix.com/vacuum/rules/owasp/owasp-protection-global-unsafe/</link><pubDate>Wed, 05 Jul 2023 15:26:52 -0400</pubDate><guid>https://quobix.com/vacuum/rules/owasp/owasp-protection-global-unsafe/</guid><description>APIs should be protected by a security rule either at global or operation level. Ensure that the security rule is defined at least at one of these levels.
Rule was extracted from https://github.com/italia/api-oas-checker/blob/master/security/security.yml
Bad example openapi: 3.0.1 info: version: 1.2.3 title: securitySchemes paths: /security-ko-get: get: responses: {} head: security: [] components: securitySchemes: BasicAuth: type: http scheme: basic Good Example openapi: 3.0.1 info: version: 1.2.3 title: securitySchemes paths: /security-ko-missing: put: responses: {} post: security: [] /security-ok-put: put: security: - BasicAuth: [] responses: {} /security-ok-get: get: security: - {} responses: {} head: security: - {} - BasicAuth: [] /security-ko-info: post: security: - {} - BasicAuth: [] components: securitySchemes: BasicAuth: type: http scheme: basic How do I fix this violation?</description></item><item><title>owasp-jwt-best-practices</title><link>https://quobix.com/vacuum/rules/owasp/owasp-jwt-best-practices/</link><pubDate>Wed, 05 Jul 2023 15:19:23 -0400</pubDate><guid>https://quobix.com/vacuum/rules/owasp/owasp-jwt-best-practices/</guid><description>Security schemes using JWTs must explicitly declare support for RFC8725 in the description.
JSONPaths used $..securitySchemes[*][?(@.type==&amp;quot;oauth2&amp;quot;)]
$..securitySchemes[*][?(@.bearerFormat==&amp;quot;jwt&amp;quot; || @.bearerFormat==&amp;quot;JWT&amp;quot;)]
Bad example openapi: &amp;#34;3.1.0&amp;#34; info: version: &amp;#34;1.0&amp;#34; components: securitySchemes: &amp;#34;goodOAuth2&amp;#34;: type: oauth2 description: RFC8725 Compliant JWT &amp;#34;goodBearerJWT&amp;#34;: type: &amp;#34;ttp bearerFormat: jwt description: &amp;#34;This is also a RFC8725 compliant JWT Good Example openapi: 3.1.0 info: version: 1.0 components: securitySchemes: &amp;#34;badOAuth2&amp;#34;: type: oauth2 description: No way of knowing if these JWTs are following best practices.</description></item><item><title>owasp-auth-insecure-schemes</title><link>https://quobix.com/vacuum/rules/owasp/owasp-auth-insecure-schemes/</link><pubDate>Wed, 05 Jul 2023 15:08:01 -0400</pubDate><guid>https://quobix.com/vacuum/rules/owasp/owasp-auth-insecure-schemes/</guid><description>There are many HTTP authorization schemes but some of them are now considered insecure, such as negotiating authentication using specifications like NTLM or OAuth v1.
JSONPath used $..securitySchemes[*][?(@.type==&amp;quot;http&amp;quot;)].scheme
Bad example openapi: &amp;#34;3.1.0&amp;#34; info: version: &amp;#34;1.0&amp;#34; components: securitySchemes: &amp;#34;BadAuth1&amp;#34;: type: http scheme: negotiate &amp;#34;BadAuth2&amp;#34;: type: http scheme: oauth Good Example openapi: &amp;#34;3.1.0&amp;#34; info: version: &amp;#34;1.0&amp;#34; components: securitySchemes: &amp;#34;BearerAuth&amp;#34;: type: http scheme: bearer How do I fix this violation? Use a different authorization scheme.</description></item><item><title>owasp-no-credentials-in-url</title><link>https://quobix.com/vacuum/rules/owasp/owasp-no-credentials-in-url/</link><pubDate>Wed, 05 Jul 2023 14:59:25 -0400</pubDate><guid>https://quobix.com/vacuum/rules/owasp/owasp-no-credentials-in-url/</guid><description>Keep security credentials out of paths and query parameters!
URL parameters must not contain credentials such as API key, password, or secret.
JSONPath used $..parameters[*][?(@.in =~ /(query|path)/)].name
Bad example openapi: &amp;#34;3.1.0&amp;#34; paths: /nuggets/{id}/: get: description: &amp;#34;get&amp;#34; parameters: - name: client_secret in: query required: true - name: token in: query required: true - name: refresh_token in: query required: true - name: id_token in: query required: true - name: password in: query required: true - name: secret in: query required: true - name: apikey in: query required: true - name: apikey in: path required: true - name: API-KEY in: query required: true Good Example openapi: &amp;#34;3.</description></item><item><title>owasp-no-api-keys-in-url</title><link>https://quobix.com/vacuum/rules/owasp/owasp-no-api-keys-in-url/</link><pubDate>Wed, 05 Jul 2023 13:15:21 -0400</pubDate><guid>https://quobix.com/vacuum/rules/owasp/owasp-no-api-keys-in-url/</guid><description>Keep API Keys out of paths and query parameters!
API Keys are (usually opaque) strings that are passed in headers, cookies or query parameters to access APIs. Those keys can be eavesdropped, especially when they are stored in cookies or passed as URL parameters.
JSONPath used $..securitySchemes[*][?(@.type==&amp;quot;apiKey&amp;quot;)].in
Bad example openapi: &amp;#34;3.1.0&amp;#34; info: version: &amp;#34;1.0&amp;#34; components: securitySchemes: &amp;#34;APIKeyInQuery&amp;#34;: type: apiKey in: query &amp;#34;APIKeyInPath&amp;#34;: type: apiKey in: path Good Example openapi: &amp;#34;3.1.0&amp;#34; info: version: &amp;#34;1.</description></item><item><title>owasp-no-http-basic</title><link>https://quobix.com/vacuum/rules/owasp/owasp-no-http-basic/</link><pubDate>Wed, 05 Jul 2023 13:06:57 -0400</pubDate><guid>https://quobix.com/vacuum/rules/owasp/owasp-no-http-basic/</guid><description>Security scheme uses HTTP Basic. Use a more secure authentication method, like OAuth 2.0
Basic authentication credentials transported over network are more susceptible to interception than other forms of authentication, and as they are not encrypted it means passwords and tokens are more easily leaked.
It&amp;rsquo;s time to upgrade that old, janky authentication mechanism.
JSONPath used $.components.securitySchemes[*]
Bad example openapi: &amp;#34;3.1.0&amp;#34; info: version: &amp;#34;1.0&amp;#34; components: securitySchemes: &amp;#34;please-hack-me&amp;#34;: type: &amp;#34;http&amp;#34; scheme: basic Good Example openapi: &amp;#34;3.</description></item><item><title>owasp-no-numeric-ids</title><link>https://quobix.com/vacuum/rules/owasp/owasp-no-numeric-ids/</link><pubDate>Wed, 05 Jul 2023 12:28:02 -0400</pubDate><guid>https://quobix.com/vacuum/rules/owasp/owasp-no-numeric-ids/</guid><description>OWASP API1:2019 - Use random IDs that cannot be guessed. UUIDs are preferred
Set the format to be uuid.
JSONPath used $.paths..parameters[*][?(@.name == &amp;quot;id&amp;quot; || @.name =~ /(_id|Id|-id)$/)))]
Bad example openapi: &amp;#34;3.1.0&amp;#34; paths: /fish/{id}/: get: description: &amp;#34;get&amp;#34; parameters: - name: id in: path schema: type: integer Good Example openapi: &amp;#34;3.1.0&amp;#34; paths: /fish/{id}/: get: description: &amp;#34;get&amp;#34; parameters: - name: id in: path schema: type: string format: uuid How do I fix this violation?</description></item></channel></rss>