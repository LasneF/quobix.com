<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer API Documents on quobix</title><link>https://quobix.com/vacuum/api/</link><description>Recent content in Developer API Documents on quobix</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 19 Jun 2022 07:39:53 -0400</lastBuildDate><atom:link href="https://quobix.com/vacuum/api/index.xml" rel="self" type="application/rss+xml"/><item><title>Custom JS Functions</title><link>https://quobix.com/vacuum/api/custom-javascript-functions/</link><pubDate>Sat, 22 Jul 2023 08:20:04 -0400</pubDate><guid>https://quobix.com/vacuum/api/custom-javascript-functions/</guid><description>Sometimes using the core functions are just not enough. Sometimes we need more power, we need the ability to hook in custom code and custom business logic.
Spectral does a great job with custom functions, So, vacuum has adopted a very similar design, to facilitate custom functions.
Since v0.3.0 vacuum support JavaScript based functions as well as golang based functions. vacuum is written in golang. When building a JavaScript function, we need to remember that the JavaScript code is being read in by vacuum and then parsed and executed by the goja JavaScript engine.</description></item><item><title>Loading a RuleSet</title><link>https://quobix.com/vacuum/api/loading-ruleset/</link><pubDate>Mon, 04 Jul 2022 08:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/api/loading-ruleset/</guid><description>It&amp;rsquo;s easy to generate a recommended RuleSet using the built-in Rules, but what if you want to load in a RuleSet from a file, or perhaps construct one using code - what are the options?
Create RuleSet from a file Use rulesets.CreateRuleSetFromData() to create a new RuleSet pointer.
// read in a RuleSet file ruleSetBytes, err := ioutil.ReadFile(&amp;#34;specific-ruleset.yaml&amp;#34;) if err != nil { panic(err.Error()) } // build and store built-in vacuum default RuleSets.</description></item><item><title>RuleResultSet</title><link>https://quobix.com/vacuum/api/rule-resultset/</link><pubDate>Sun, 03 Jul 2022 08:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/api/rule-resultset/</guid><description>vacuum will return a slice of model.RuleFunctionResult structs as a linting result. The data list is unstructured and unsorted. If you&amp;rsquo;re game to try and sift through all that then good luck!
However, most of us want a simpler way to sort, group and search that data.
This is where RuleResultSet comes in.
Creating a new RuleResultSet Use model.NewRuleResultSet() to create a new RuleResultSet pointer.
// read in an OpenAPI Spec to a byte array specBytes, err := ioutil.</description></item><item><title>Custom Golang Functions</title><link>https://quobix.com/vacuum/api/custom-functions/</link><pubDate>Sun, 03 Jul 2022 08:20:04 -0400</pubDate><guid>https://quobix.com/vacuum/api/custom-functions/</guid><description>Sometimes using the core functions are just not enough. Sometimes we need more power, we need the ability to hook in custom code and custom business logic.
Spectral does a great job with custom functions, So, vacuum has adopted a very similar design, to facilitate custom functions.
Since v0.3.0 vacuum support JavaScript based functions as well as golang based functions. Structure of a custom function A custom function is written the exact same way that all functions are written in vacuum.</description></item><item><title>API Quick Start</title><link>https://quobix.com/vacuum/api/getting-started/</link><pubDate>Sun, 03 Jul 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/api/getting-started/</guid><description>vacuum has been designed to work as an API from the ground up. This was actually one of the motivators behind the development of the tool.
If you&amp;rsquo;re a golang developer, and you want to lint OpenAPI specs using a library, then look no further.
Install vacuum install vacuum Lint an OpenAPI Spec This simple quick start code will read in an OpenAPI, generate a RuleSet from the built-in defaults, Then it will apply the rules to the spec, filter the results by a category, and then print them out to the console.</description></item><item><title>The Index</title><link>https://quobix.com/vacuum/api/spec-index/</link><pubDate>Sun, 03 Jul 2022 07:39:53 -0400</pubDate><guid>https://quobix.com/vacuum/api/spec-index/</guid><description>The first iteration of vacuum had no index. Every rule would walk through the specification nodes, looking for what ever it is the function does. This worked great, except.. it didn&amp;rsquo;t.
vacuum would slow way down on complex rules like oas3-valid-schema-example.
It slowed down to the point where it was taking seconds to run on very large specs. This was no good.
After a re-think and many prototypes, I designed a simple index that will seek out everything in the specification and hold a reference.</description></item><item><title>linting other documents</title><link>https://quobix.com/vacuum/api/non-openapi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://quobix.com/vacuum/api/non-openapi/</guid><description>The majority of vaccum is designed for linting OpenAPI. Most of the built in functions and rules are designed for OpenAPI documents.
However, vacuum is built to be extensible, and it is possible to lint other types of documents using the core functions.
Skipping OpenAPI checks In version v0.2.7 a new property was added to motor.RulesetExecution called SkipDocumentCheck
This allows all OpenAPI/Swagger checks to be bypassed and allows rules to be applied to any document.</description></item></channel></rss>